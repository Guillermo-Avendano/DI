#$option echo off 
#$option lockprot on 
#$nop
#$nop
#$nop -------------------------------------------------------------
#$nop
#$nop roolb.cli 
#$nop
#$makeg RoVers 7.61.010
#$nop
#$nop Start/stop the Rochade online backup.
#$nop 
#$nop -------------------------------------------------------------
#$nop
#$nop Copyright (c) 2005-2013 ASG GmbH & Co. KG. All rights reserved.
#$nop 
#$nop -------------------------------------------------------------
#$nop
#$nop Usage:
#$nop ------
#$nop
#$nop This script is called by backup.[bat,sh].
#$nop
#$nop Parameter:
#$nop ----------
#$nop
#$nop Parameters are passed through environment variables:
#$nop
#$nop RO_OLB_MODE = BEGIN : start online backup mode
#$nop             = END   : stop online backup mode
#$nop
#$nop RO_OLB_ADM  : adminstrator $logon and $oper xlogon
#$nop
#$nop RO_OLB_PWD  : adminstrator password for $logon
#$nop
#$nop Return values:
#$nop --------------
#$nop
#$nop The script sets the exit code of the Rochade client:
#$nop
#$nop     0       = no error 
#$nop   >=1       = an error has been occured
#$nop
#$nop -------------------------------------------------------------
#$nop
#$nop
#$redln argwa1
#$del 1 $
#$append

;=====================================================================

#$option lockerr off
#$option lockprot off
#$option lockprompt off
#$option lockwarn off

; print version
#$prot roolb.cli@  :RoVers

; get online backup mode
#$make argmode
#$profile get $environment RO_OLB_MODE argmode
if (:argmode <> BEGIN) AND (:argmode <> END)
(
    #$concat argmess @Error:@ Wrong@ online@ backup@ mode:@  :argmode .
    #$prot :argmess         
    #$oper user_log :argmess
    #$exit 1
)

; get adm user
#$make argadm
#$profile get $environment RO_OLB_ADM argadm


; get adm password
#$make argpwd
#$profile get $environment RO_OLB_PWD argpwd
if :argpwd = NIL 
(
	#$make argpwd @ 
)

#$make argrole
#$make argfail
#$make argwarn
#$make argexp


; logon adm
#$logon :argadm :argpwd argrole argfail argwarn
#$make argrc :retcode
if :argrc <> T
(
    #$concat argmess @Error:@ @$logon@ failed@,@ retcode:@  :argrc @ user: @  :argadm .
    #$prot :argmess         
    #$oper user_log :argmess
    #$exit 2
)


; load operator privileges
#$oper xlogon :argadm :argpwd argrole argfail argexp
if :argrc <> T
(
    #$concat argmess @Error:@ @$oper xlogon@ failed@,@ retcode:@  :argrc @  :argfail @  :argexp @ :argexp @ user: @  :argadm.
    #$prot :argmess         
    #$oper user_log :argmess
    #$exit 3
)


; get server section from server initialization file
#$make argsect
#$oper profile get $cmdline $startsection  argsect
#$make argrc :retcode
if (:argrc <> T) OR (:argsect = NIL)
(
    #$concat argmess @Error:@ @Server@ section@ not@ found:@  :argrc @  :argsect .
    #$prot :argmess         
    #$oper user_log :argmess
    #$exit 4
)

; check for online backup database
#$make argolddb
#$oper profile get :argsect ONLINE_BACKUP_DATABASE argolddb
#$make argrc :retcode
if (:argrc <> T) OR (:argolddb = NIL)
(
    #$concat argmess @Error:@ ONLINE_BACKUP_DATABASE@ not@ set@ in@ section@  :argsect
    #$prot :argmess         
    #$oper user_log :argmess
    #$concat argmess @ @ @ @ @ @ @ of@ the@ server@ initialization@ file: :argrc @  :argolddb .
    #$prot :argmess         
    #$oper user_log :argmess
    #$exit 5
)

;*********************************************************************

; wait for online backup state OFF / ACTIVE
repeat
(
    #$oper online_backup show argcurr
    #$make argrc :retcode
    if :argrc <> T
    (
    	#$concat argmess @Error:@ @$oper@ online_backup@ show:@  :argrc .
    	#$prot :argmess         
    	#$oper user_log :argmess
	#$exit 6
    )
    if :argcurr = CLEANUP
    (
    	#$concat argmess Server@ cleans@ up@ databases@,@ please@ wait.
    	#$prot :argmess         
    	#$oper user_log :argmess
    	#$sleep 30
    )
)
until (:argcurr = OFF) OR (:argcurr = ACTIVE)

;*********************************************************************

; switch online backup mode OFF <--> ACTIVE

if :argmode = BEGIN (
	#$make argprev OFF
) ELSE (
	#$make argprev ACTIVE
)

; check current online backup mode 
if :argcurr <> :argprev
(
  	#$concat argmess @Error:@ Wrong@ mode:@  :argcurr @ expected:@  :argprev .
    	#$prot :argmess         
    	#$oper user_log :argmess
    	#$exit 7
)

; enable new online backup mode
#$oper online_backup :argmode argcurr 
#$make argrc :retcode	
if :argrc <> T
(
   	#$concat argmess @Error:@ @$oper@ @online_backup@  :argmode @ failed:@  :argrc .
    	#$prot :argmess         
    	#$oper user_log :argmess
	#$exit 8
)

; check (again) for previous mode - another script could be started 
if :argcurr <> :argprev
(
  	#$concat argmess @Error: Wrong@ mode@  :argcurr  @ expected:@  :argprev .
    	#$prot :argmess         
    	#$oper user_log :argmess
	#$exit 9
)

; check again for backup mode
#$oper online_backup show argcurr
#$make argrc :retcode
if :argrc <> T
(
   	#$concat argmess @Error:@ @$oper@ online_backup@ show:@  :argrc .
    	#$prot :argmess         
    	#$oper user_log :argmess
	#$exit 10
)

if ((:argmode = BEGIN) AND (:argcurr <> ACTIVE)) OR ((:argmode = END) AND (:argcurr <> OFF) AND (:argcurr <> CLEANUP)) 
(
    	#$concat argmess @Error:@ Wrong@ mode@  :argcurr .
    	#$prot :argmess         
    	#$oper user_log :argmess
	#$exit 11
)

#$concat argmess :argmode @ online@ backup@ mode@ successfull@,@ current@ mode:@  :argcurr .
#$prot :argmess         
#$oper user_log :argmess
#$exit 0

;=====================================================================

.
#$quit
#$pre argwa1 argwa2
#$do argwa2
#$halt :retcode
