#------------------------------------------------------------------------------
# Configuration of meta application IS.
#
# Copyright (c) 1983-2023 Rocket Software, Inc. or its affiliates. All Rights Reserved.
#
# Version @Version@
#
#------------------------------------------------------------------------------

#--- the official product name (not to be translated)
productTitle=$Message.metapp.is.productTitle

#--- the title string for this meta application
#--- Rochade will be replaced by trademark Rochade
title=$Message.metapp.is.title

#--- initial class for RIR
init=com.rochade.rir.init.InitialRIR

#--- index applications 
#--- The index search application codes that should be in index "app_id" field
#--- Current apps : search_mg search_rdb search_rm search_ref search_rds search_rdi search_rbi search_rbd search_rdq search_sti
index.applications=search_mg search_rdb search_rm search_ref search_rds search_rdi search_rbi search_rbd search_rdq search_sti

#--- applications contexts
search_mg.context=$environment.RBR
#search_mg_lob1.context=$environment.RBR
#search_mg_lob2.context=$environment.RBR
#search_mg_lob3.context=$environment.RBR
#search_mg_lob1.title=Business Glossary
#search_mg_lob2.title=Business Glossary
#search_mg_lob3.title=Business Glossary

#--- Relational Database context string example (Db schemas, tables, columns etc from MetaGlossary subject area are indexed to another Solr core)
search_rdb.context=$environment.RBR
#search_rdb_lob1.context=$environment.RBR
#search_rdb_lob2.context=$environment.RBR
#search_rdb_lob3.context=$environment.RBR
#search_rdb_lob1.title=Relational Database
#search_rdb_lob2.title=Relational Database
#search_rdb_lob3.title=Relational Database

#--- Models context
search_rm.context=$environment.RBR
#search_rm_lob1.context=$environment.RBR
#search_rm_lob2.context=$environment.RBR
#search_rm_lob3.context=$environment.RBR
#search_rm_lob1.title=Models
#search_rm_lob2.title=Models
#search_rm_lob3.title=Models

#--- Reference Data
search_ref.context=$environment.RBR
#search_ref_lob1.context=$environment.RBR
#search_ref_lob2.context=$environment.RBR
#search_ref_lob3.context=$environment.RBR
#search_ref_lob1.title=Reference Data
#search_ref_lob2.title=Reference Data
#search_ref_lob3.title=Reference Data

#--- Data Structure context
search_rds.context=$environment.RBR
#search_rds_lob1.context=$environment.RBR
#search_rds_lob2.context=$environment.RBR
#search_rds_lob3.context=$environment.RBR
#search_rds_lob1.title=Data Structure
#search_rds_lob2.title=Data Structure
#search_rds_lob3.title=Data Structure

#--- Data Integration context (Transformation)
search_rdi.context=$environment.RBR
#search_rdi_lob1.context=$environment.RBR
#search_rdi_lob2.context=$environment.RBR
#search_rdi_lob3.context=$environment.RBR
#search_rdi_lob1.title=Transformation
#search_rdi_lob2.title=Transformation
#search_rdi_lob3.title=Transformation

#--- Business Intelligence context
search_rbi.context=$environment.RBR
#search_rbi_lob1.context=$environment.RBR
#search_rbi_lob2.context=$environment.RBR
#search_rbi_lob3.context=$environment.RBR
#search_rbi_lob1.title=Business Intelligence
#search_rbi_lob2.title=Business Intelligence
#search_rbi_lob3.title=Business Intelligence

#--- BigData context
search_rbd.context=$environment.RBR
#search_rbd_lob1.context=$environment.RBR
#search_rbd_lob2.context=$environment.RBR
#search_rbd_lob3.context=$environment.RBR
#search_rbd_lob1.title=Big Data
#search_rbd_lob2.title=Big Data
#search_rbd_lob3.title=Big Data

#--- Data Quality Management
search_rdq.context=$environment.RBR
#search_rdq_lob1.context=$environment.RBR
#search_rdq_lob2.context=$environment.RBR
#search_rdq_lob3.context=$environment.RBR
#search_rdq_lob1.title=Data Quality Management
#search_rdq_lob2.title=Data Quality Management
#search_rdq_lob3.title=Data Quality Management

#--- Stewardship context
search_rs.context=$environment.RBR
#search_rs_lob1.context=$environment.RBR
#search_rs_lob2.context=$environment.RBR
#search_rs_lob3.context=$environment.RBR
#search_rs_lob1.title=Stewardship
#search_rs_lob2.title=Stewardship
#search_rs_lob3.title=Stewardship

#--- Stitching
search_sti.context=$environment.RBR
#search_sti_lob1.context=$environment.RBR
#search_sti_lob2.context=$environment.RBR
#search_sti_lob3.context=$environment.RBR
#search_sti_lob1.title=Stitching
#search_sti_lob2.title=Stitching
#search_sti_lob3.title=Stitching

#--- Other application example that didn't exist in RoBrowser
#--- All application connection settings should be located in relevant applications_X.properties 
#--- and its code should be located in the main applications.properties), where X -is an application code(mg, rbd etc)
#--- $environment.X should be located in applications_X.properties file
#index.applications=X
#X.context=$environment.X

#--- portlet Configuration
portlets=pSolrSearch

pSolrSearch.component=SolrSearchPortlet
pSolrSearch.title=$Message.SolrSearch.title

#--- Synchronize general index search preferences imported during installation
#--- with values from relevant solr and solr_X .properties files
synchImportPref=false

#--- Default index search layouts
layouts=table,list

table=SearchItemList
list=SolrItemHtmlList

#--- Default search layout that is used to display search result
defLayout=table

#--- Fields not to show in a search result (the list of index search fields names)
pureFields=id,absPath,app_id,SCOPEID

#--- Solr does nothing to time out any requests -- it lets both updates and queries take however long they need to take to be processed fully. 
#--- However, the servlet container being used to run Solr may impose arbitrary timeout limits on all requests. 
#--- Please consult the documentation for your Serlvet container if you find that this value is too low.

#--- Amount of time, in milliseconds, allowed for a search to complete. Values <= 0 mean no time restriction. 
#--- If this time expires before the search is complete, any partial results will be returned.
timeAllowed=

#--- Determines the timeout (CONNECTION_TIMEOUT) in milliseconds until a connection is established.
#--- A timeout value of zero is interpreted as an infinite timeout.
connectionTimeout=
#--- Defines the socket timeout (SO_TIMEOUT) in milliseconds, which is the timeout for waiting for data or a maximum period inactivity between two consecutive data packets). 
#--- A timeout value of zero is interpreted as an infinite timeout.
soTimeout=

#######################################################
#########  Solr Connection settings  ##################
#######################################################

#########################
# 
## The URL to the Solr server for Index Search
#
#########################  
httpSolrServer=http\://localhost\:8181/solr/

#########################
# Maps the Search Applications to their respective Solr core.
#########################
search_mg.core=BusinessTermView
search_rdb.core=DWRView
search_rm.core=Models
search_ref.core=ReferenceData
search_rds.core=DataStructure
search_rdi.core=DataIntegration
search_rbi.core=BusinessIntelligence
search_rbd.core=BigData
search_rdq.core=DataQualityManagement
search_sti.core=Stitching

##########################
# Force backward compatibility with Rochade Browser Integrated Search 8.80 and below
# If set to 'true' the name of the Solr fields will be generated in the same way
# than SearchApps 8.80 and below
# (what is <SolrFieldName>=<RochadeFieldName><ISO_lang_code>).
#
# Do NOT set to 'true' except if you connect to a Solr server indexed with legacy mode
# so a Solr instance fulfilled by:
# - either Indexing Tool up to 8.80
# - or by Indexing Tool after 8.80 with 'legacyIndexing' option set to 'true' too.
##########################
legacyIndexing=false

##########################
# Indicates, when the attribute of the item is empty, if it should be displayed ('true') or hidden ('false')
# Note that this is a default value, distinct value for each attribute may be tuned by the 'displayIfEmpty' property of the 'Result_Page_Displayed_Features' preference
##########################
Display_Empty_Features_Default_Value=false

##########################
# Specifies the search mode to be used.
# In search expressions, each word is interpreted as a separate search term.
# 
# The search mode specifies how to combine multiple terms and whether wildcards are available:
# - simple1: Multiple search terms are combined by OR (i.e., search results must contain at least one of the terms).
#		In other words: Each word/symbol of search query is interpreted as a word: spaces are interpreted as OR.
#       				The OR operator will be added between two search words automatically.
#						Characters normally used as wildcards ('*') are processed for themselves (e.g. '*' will match items having a '*' character at that place in the word of the search pattern)
#						Boolean operators (AND, OR, and NOT) are processed as the word ('and', 'or' and 'not') to search for.
#
# - simple2: Search results must contain all terms. So mode 'simple2' is an exact match.
# 		In other words: with 'simple2' all words are interpreted as word group: e.g. 'book value' is interpreted as 'book' followed by a whitespace followed by 'value'. Matching item will contain the sentence "book value"
#
# - advanced: You can use asterisks (*) as wildcards in your search terms and specify Boolean operators between the terms (i.e., AND, OR and NOT).
#
# - dualSearch: This is a combination of the 'simple2' and 'advanced' search modes. The exact match search is run first then the boolean-operated one is run in a second time.
#		In other words: with 'dualSearch', the search pattern is processed twice:
#			- Firstly: as if it it was enclosed with double-quotes. So the search pattern is processed just like in the 'simple2' mode. The items that exactly match with the pattern are returned at the beginning of the result list.
#			- Secondly: as a boolean-combination of required word (group) that may contain wildcards. So the search pattern is processed just like in the 'advanced' mode. The items that match this  advanced pattern are concatenated at the bottom of the result list.
#		IMPORTANT: if the provided search pattern is enclosed with double quotes, only the exact match search happens (just like if mode was 'simple2'). So only exact matches are returned. The match for combined expressions are not computed!
##########################
mode=advanced

######################################################################
# Advanced Solr settings - Do NOT modify except if advised to do so! #
######################################################################

#########################
# Fields for dynamic filtering
# Specify field names that will be used to filter the query.
# Conditions on the fields listed here will be generated dynamically to restrict the super set of documents that can be returned, without influencing score.
# Format: List of SOLR field types separated by comma
# 
# Take care that this setting is NOT the direct value of the fq parameter (http://wiki.apache.org/solr/CommonQueryParameters#fq)
# that is given at runtime to the Solr server (which one must be in the form 'field_xxx:(condition_clause)')!
# This setting only lists the fields that must be used to extend dynamically the Solr fq clauses. It is not directly the 'fq' clause itself!
# The restricting values to build the fq clauses are provided at runtime by the web client via an URL query parameter having the same name!
# (example: MyInfoAssist provides the restriction about Glossaries to search in via an URL query parameter named 'GLOSSARYID').
# 
# ATTENTION: This setting should stay UNTOUCHED except if one is developing its own web client (other than GlobalSearch and MyInfoAssist)!!!
#
#########################
fieldsForDynamicFiltering=GLOSSARYID,roles,visibility.filter

#########################
# Setting for the 'dualSearch' search mode to decide if exact matches must always be queried or not. ##
#
# If the active search mode is 'dualSearch', then this flag decides if:
# - either, when flag is 'true', the exact match query must be skipped (because we consider that running
# 	exact match query on a 'very simple' pattern is useless and same results will in fact normally
# 	be brought back by the wildcard match with same pattern. This last assertion is nevertheless very hard to prove!
# 	It is why this flag exists. If we were certain, this flag would be always 'true', that's all.)
# - or, when flag is 'false', the exact match query is always executed first (no matter of the pattern).
# 
# For other search modes this flag has no effect.
#
# A very simple pattern means a pattern:
# - compound of only one single token
# - and containing only letter or digit characters (see {@link Character#isLetterOrDigit(char)})
#
# Default value is 'false'
#
#########################
dualSearchMode.exactMatch.skipSimplePatterns=false

#########################
# Setting for the 'dualSearch' search mode to decide when the wildcard match results become useless because we have already retrieved enough results from the exact match query. ##
#
# This value applies only when running {@link SearchMode#DUAL_SEARCH} search mode.
# It defines when we skip the second part (i.e. wildcard match) of the search operations.
# In other words, when the first part (i.e. exact match) of the search operations brings back more than
# that number of results, we consider that it is enough and it would be too costly to run also the wildcard match
# to bring back extra results.
# A value of 0 (or negative) means no limit. However it could be very costly to run the wildcard match
# if the exact match brings back a huge number of results (>10000). It might even get down the Solr server.
# A value above 2000 is really not recommended.
#
# Note: that limit applies by each Solr core independently! It means that
# if, for Solr Core A, the exact match brings back more results than this limit,
# the wildcard match will not be run for Core A, but if, at the same time, for Solr Core B,
# the exact match brings back less results than this limit, the wildcard match will be executed nevertheless for Core B.
#
# Default value is '2000'
#
#########################
dualSearchMode.wildcardMatch.skipOnceRetrievedEnoughExactMatches=2000

#########################
# Setting for backward compatibility with legacy Indexing Tool and IndexSearch AutoUpdate service.
#
# When this setting is set to 'true', the visibilityFiltering aspect relies on indexed roles
# (as they are indexed by legacy Indexing Tool and IndexSearch AutoUpdate service).
# When the new indexing application is used (IndexUpdateService) to index data, this flag can be kept to 'false'
# because the visibilityFiltering aspect does not rely on indexed roles but on other indexed data.
# 
# Default value is 'false'
# Setting is optional (default value will apply if missing)
#########################
visibility.filter.basedOnIndexedRoles=false

#########################
# Setting about validation of search patterns for security purpose. 
#
# This setting defines the total max length (in characters) that is allowed for the whole search pattern.
# 
# Default value is '513'
# Setting is optional (default value will apply if missing)
#########################
searchPattern.securityValidation.totalMaxLength=513

#########################
# Setting about validation of search patterns for security purpose. 
#
# This setting defines the max length (in characters) that is allowed for one term of the search pattern.
# A term is for example: "field1:(x AND y)" in pattern "field1:(x AND y) field2:(a OR b)"
#
# Default value is '300'
# Setting is optional (default value will apply if missing)
#########################
searchPattern.securityValidation.termMaxLength=300

#########################
# Setting about validation of search patterns for security purpose. 
#
# This setting defines the max length (in characters) that is allowed for one clause of a term into the search pattern.
# A clause is for example: 'alpha' in term "field:(alpha OR omega)"
#
# Default value is '50'
# Setting is optional (default value will apply if missing)
#########################
searchPattern.securityValidation.clauseMaxLength=50

