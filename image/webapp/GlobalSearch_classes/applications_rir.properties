# Information_Retrieval: REST API configuration file
#
# Copyright (c) 1983-2023 Rocket Software, Inc. or its affiliates. All Rights Reserved.
#
# Version 10.01.001
#
# properties used to define application specific properties

#########################
# empty user will enable the remote user access mode (remote user will need to provide credentials)
# a user must be set when trusted=false
user=IS-IDX-Read

#########################
#Password for the user account or specify trusted=true if you want to use the trusted connection feature of Rochade
#Note: You must enable trusted connections on both the Rochade and the application server side
#The private key file for trusted connection needs to be called privatekey or .privatekey, and be either in
# root of the web application (so directly inside the context folder): <webapp_context_folder>/
# or in <webapp_context_folder>/WEB-INF/classes
# or in <webapp_context_folder>/WEB-INF/classes/com/rochade/wa/api/roc/
password=

#########################
## Enable trusted connection by defining the setting 'trusted' to 'true'.
## 
## The file containing the private key must be found in the classpath of the application.
## Best way is to create a file named '.privatekey' with that key and drop it:
## - in the folder WEB-INF/classes/ for the Search web applications (IR/GS/ISU)
## - or for the Indexing tool, next to the script running the tool (RochareToSolr.cmd or RochadeToSolr.sh)
## 
trusted=true

#########################
## AccountUtility
## --------------
## This application may fetch password automatically from the AccountUtility tool.
## When contacting the AccountUtility, this application does the request using the following settings:
## - user: is the user specified above (this is the user for which we want to retrieve the password)
## - application: The name of the application to specify with '-n' option when fetching password from AccountUtility API. This value specifies how this tool introduces itself near the AccountUtility. Keep this setting empty if not specifying application when adding user to the AccountUtility.
accountUtility.application=
## - account file: the file to be used (the one that stores the passwords). It is the file specified with '-f' option the AccountUtility tool. Keep this setting empty to use the default account file.
accountUtility.accountFile=

#########################
## Key in the map returned by the method getApplicationParameters(String id) of the class specified in the argument applicationPoolID  
## in PoolManager.getApplicationPoolManager().
##  
## Value: The name of the Rochade application.
## Type of value: String.
## Key is mandatory: Yes.
##/
applicationName=METAAPPS

#########################
## Key in the map returned by the method getApplicationParameters(String id) of the class specified in the argument applicationPoolID
## in PoolManager.getApplicationPoolManager().
##  
## Value: The version of the Rochade application.
## Type of value: String.
## Key is mandatory: Yes.
##/
applicationVersion=PRODUCTION

#########################
## Define exactly one control space, that is used to managed indexing preferences.
## Values should be the same as in the startup.properties file of the Rochade Browser tool
## where the Index Search tool will be used (so the indexing preferences are correclty shared).
control.databaseName=AP-DATA
control.applicationName=METABILITY
control.applicationVersion=USER
control.applicationType=MC

#########################
# Define if a client which uses Information_Retrieval (like MyInfoAssist) can overwrite the 'mode' setting by passing a new value as parameter into the search request.
# Default value is 'false'
modeExternal=false

#########################
## 
# IMPORTANT: this setting now applies no matter if InfoRetrieval is connected to Solr OR directly connected to Rochade server
# (and so use directly the Rochade Server to operate the search)
#
# Specifies the search mode to be used.
# In search expressions, each word is interpreted as a separate search term.
# 
# The search mode specifies how to combine multiple terms and whether wildcards are available:
# - simple1: Multiple search terms are combined by OR (i.e., search results must contain at least one of the terms).
#		In other words: Each word/symbol of search query is interpreted as a word: spaces are interpreted as OR.
#       				The OR operator will be added between two search words automatically.
#						Characters normally used as wildcards ('*') are processed for themselves (e.g. '*' will match items having a '*' character at that place in the word of the search pattern)
#						Boolean operators (AND, OR, and NOT) are processed as the word ('and', 'or' and 'not') to search for.
#
# - simple2: Search results must contain all terms. So mode 'simple2' is an exact match.
# 		In other words: with 'simple2' all words are interpreted as word group: e.g. 'book value' is interpreted as 'book' followed by a whitespace followed by 'value'. Matching item will contain the sentence "book value"
#
# - advanced: You can use asterisks (*) as wildcards in your search terms and specify Boolean operators between the terms (i.e., AND, OR and NOT).
#
# - dualSearch: This is a combination of the 'simple2' and 'advanced' search modes. The exact match search is run first then the boolean-operated one is run in a second time.
#		In other words: with 'dualSearch', the search pattern is processed twice:
#			- Firstly: as if it it was enclosed with double-quotes. So the search pattern is processed just like in the 'simple2' mode. The items that exactly match with the pattern are returned at the beginning of the result list.
#			- Secondly: as a boolean-combination of required word (group) that may contain wildcards. So the search pattern is processed just like in the 'advanced' mode. The items that match this  advanced pattern are concatenated at the bottom of the result list.
#		IMPORTANT: if the provided search pattern is enclosed with double quotes, only the exact match search happens (just like if mode was 'simple2'). So only exact matches are returned. The match for combined expressions are not computed!
mode=advanced

# sort/ rank (in planning)

################################
#
# Refers to the number of rows the service is allowed to fill
# In other words, it is the maximum number of items which can be fetched by a query.
# Setting this parameter to 0, will disable this feature
maxHits=100

################################
#
# Limits the runtime of the query.
# These values are available:
# - The value 0 (zero) specifies that the runtime of the query is not limited.
# - Positive integer values specify the runtime limit in seconds.
# - Negative integer values specify the runtime limit in milliseconds.
maxTime=15000

#################
#
# used in old MIA mode to define if context should be displayed with or without namespace path 
#
contextPath=short

#########################
# Define what information must be displayed to the end-user when something goes wrong (i.e. an error happens).
# Note that it does not impact the logging itself; no matter this setting, the errors are still logged according to the configuration of the logging system itself (Log4J).
# This setting only impacts what is displayed into the web browser of the user in case of error.
# Possible values are:
# 	- discreet: an universal error message (always the same) is displayed to the end-user. This is the most recommended value for PRODUCTION environments.
# 	- verbose: the hierarchy of cause(s) are displayed (but not the full stracktrace). This is a value that could typically be used for TEST environments. 
# 	- stacktrace: the hierarchy of cause(s) and the full stracktrace are reported to the end-user. That value is typically used for debugging purpose only. 
# Default value is 'discreet'
errorPage.securityLevel=discreet
