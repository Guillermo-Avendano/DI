openapi: 3.0.3
info:
  title: Diagrams
  description: |-
  version: 1.0.0

externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io

security:
  - BasicAuth: []
  - BearerAuth: []

servers:
  - url: '/rest'

tags:
  - name: Diagrams
    description: model representation of Lineages and more...
  - name: Configurations
    description: Saved configurations for the Lineages and other diagrams.

paths:
  /diagrams/lineage:
    post:
      tags:
        - Diagrams
      summary: Generates a diagram with shapes, nodes and edges representing a Lineage
      description: |
        Generates a diagram, containing visible shapes, nodes (inside shapes) and edges (between nodes) representing a Lineage.  
        
        For initial request, a minimal state model structure must be provided with:
        * seed items  

        For subsequent requests, must be provided:
        * the state model obtained from a previous call
        * action to operate on the diagram
        
        For applying a map configuration on an existing lineage diagram
        * the state model should be modified with the values from the configuration and sent in the request.
        
        _Note: For technical reasons this is published as POST method, because the request parameters might not fit into the URL._
      operationId: postLineageDiagramModel
      requestBody:
        required: true
        content:
          application/vnd.bdi-services-diagrams-lineage.v1+json:
            schema:
              $ref: '#/components/schemas/LineageDiagramModelRequest'

      responses:
        '200':
          description: |
            successful operation
            
            For `application/vnd.bdi-services-diagrams-lineage-model.v1+json` content type:  
            > The diagram is described by its model + a state model + possible actions.  
            > The state of the diagram elements (including their expansion state) is managed through the state model.  
            > The expansion state can be changed by actions on nodes. The possible actions are detailed on nodes where they can apply on.  
            > Some actions are also possible on the diagram itself. Those ones are described at the root of the response.  
            > The caller must **not** modify the state model by itself, but simply keep it and send it back again on next request.  
            > The caller interacts with the diagram state only by requesting actions to be performed on the diagram model or its nodes.
          content:
            application/vnd.bdi-services-diagrams-lineage-model.v1+json:
              schema:
                $ref: '#/components/schemas/LineageDiagramModelResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /diagrams/lineage/options:
    get:
      tags:
        - Diagrams
      operationId: getLineageOptions
      summary: Gets all the scopes of the lineage diagrams and the level of details that can be displayed on the diagram.
      description: |
        Gets all the scopes of the lineage diagrams and the level of details that can be displayed on the diagram.
      parameters:
        - name: typeId
          in: query
          description: |
            Provide the type id for which the lineage options will be retrieved
          required: false
          schema:
            type: string
        - name: displayLangs
          in: query
          description: |
            By convention, the first value corresponds to the primary language. It corresponds to the preferred language of the user, as provided in the user preferences item in the Rochade server.  
            It is also known as the working language, or at least the most important one, for the user agent.
            The remaining values correspond to the additional preferred languages of the user as provided by the user preferences item in the Rochade server.
            They are the additional languages for which the user agent wants the translations.
          required: false
          schema:
            type: array
            items:
              type: string
            default: [ "en","de" ]
      responses:
        '200':
          description: A successful response with the list of scopes and associated levels.
          content:
            application/vnd.bdi-services-diagrams-lineage-options-response.v1+json:
              schema:
                $ref: '#/components/schemas/LineageOptionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /diagrams/filters:
    get:
      tags:
        - Diagrams
      operationId: getFilters
      summary: Get all filters that user can choose to refine the diagram and the items displayed in the diagram.
      description: |
        Get all filters that user can choose to refine the diagram and the items displayed in the diagram.
      parameters:
        - name: displayLangs
          in: query
          description: |
            By convention, the first value corresponds to the primary language. It corresponds to the preferred language of the user, as provided in the user preferences item in the Rochade server.  
            It is also known as the working language, or at least the most important one, for the user agent.
            The remaining values correspond to the additional preferred languages of the user as provided by the user preferences item in the Rochade server.
            They are the additional languages for which the user agent wants the translations.
          required: false
          schema:
            type: array
            items:
              type: string
            default: [ "en","de" ]
      responses:
        '200':
          description: A successful response with the list of requested map filter categories.
          content:
            application/vnd.bdi-services-diagrams-filters-response.v1+json:
              schema:
                $ref: '#/components/schemas/MapFiltersResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /diagrams/configurations:
    post:
      tags:
        - Configurations
      operationId: saveConfiguration
      summary: Saves the filters and other configurations related to the diagrams.
      description: |
        Users can save the Map filters and other configurations related to the diagram, to reuse the same on diagrams of other items that share similar characteristics.
      requestBody:
        required: true
        content:
          application/vnd.bdi-services-diagrams-configuration.v1+json:
            schema:
              $ref: '#/components/schemas/MapConfiguration'
      responses:
        '201':
          description: A successful response indicating the configurations have been saved.
          content:
            application/vnd.bdi-services-diagrams-configuration-response.v1+json:
              schema:
                $ref: '#/components/schemas/MapConfigurationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

    get:
      tags:
        - Configurations
      operationId: getConfigurations
      summary: Gets all saved configurations for the user.
      description: |
        Gets all saved configurations for the user.
      parameters:
        - name: level
          in: query
          description: |
            the level and the respective values based on which the results will be filtered.
          required: false
          schema:
            $ref: '#/components/schemas/ConfigMapAssociationLevel'
        - name: value
          in: query
          description: |
            the level and the respective values based on which the results will be filtered. 
            _value_ is mandatory when _level_ query parameter is specified.
          required: false
          schema:
            type: string
        - name: includePublic
          in: query
          description: |
            When _true_ the saved map configurations by other users that are made accessible to public usage 
            will be included in the results returned.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: A successful response indicating the configurations have been saved.
          content:
            application/vnd.bdi-services-diagrams-configurations-response.v1+json:
              schema:
                $ref: '#/components/schemas/MapConfigurationsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /diagrams/configurations/{id}:
    get:
      tags:
        - Configurations
      operationId: getConfiguration
      summary: Gets the requested configuration for the user.
      description: |
        Gets the saved configuration identified by the provided _id_ path parameter for the user.
      parameters:
        - name: id
          in: path
          description: |
            a base 64 encoded unique identifier of the saved configuration.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response indicating the configuration has been retrieved.
          content:
            application/vnd.bdi-services-diagrams-configuration-response.v1+json:
              schema:
                $ref: '#/components/schemas/MapConfigurationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'
    put:
      tags:
        - Configurations
      operationId: updateConfiguration
      summary: Updates the requested configuration for the user.
      description: |
        Gets the saved configuration identified by the provided _id_ path parameter for the user.
      parameters:
        - name: id
          in: path
          description: |
            a base 64 encoded unique identifier of the saved configuration.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/vnd.bdi-services-diagrams-configuration.v1+json:
            schema:
              $ref: '#/components/schemas/MapConfiguration'
      responses:
        '200':
          description: A successful response indicating the configuration has been updated.
          content:
            application/vnd.bdi-services-diagrams-configuration-response.v1+json:
              schema:
                $ref: '#/components/schemas/MapConfigurationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'
    delete:
      tags:
        - Configurations
      operationId: deleteConfiguration
      summary: Deletes the requested configuration for the user.
      description: |
        Deletes the saved configuration identified by the provided _id_ path parameter for the user.
      parameters:
        - name: id
          in: path
          description: |
            a base 64 encoded unique identifier of the saved configuration.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content is returned on success.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /diagrams/business-relationship-diagrams:
    post:
      tags:
        - Diagrams
      summary: Generates a diagram with shapes, nodes and edges representing business relationships.
      description: |
        Generates a diagram, containing visible shapes, nodes (inside shapes) and edges (between nodes) representing business relationships.  

        For initial request, a minimal state model structure must be provided with:
        * seed items  

        For subsequent requests, must be provided:
        * the state model obtained from a previous call
        * action to operate on the diagram

        For applying a map configuration on an existing lineage diagram
        * the state model should be modified with the values from the configuration and sent in the request.

        _Note: For technical reasons this is published as POST method, because the request parameters might not fit into the URL._
      operationId: generateBusinessRelationshipDiagram
      requestBody:
        required: true
        content:
          application/vnd.bdi-services-business-relationship-diagram.v1+json:
            schema:
              $ref: '#/components/schemas/BusinessRelationshipModelRequest'

      responses:
        '200':
          description: |
            successful operation

            For `application/vnd.bdi-services-business-relationship-diagram.v1` content type:  
            > The diagram is described by its model + a state model + possible actions.  
            > The state of the diagram elements (including their expansion state) is managed through the state model.  
            > The expansion state can be changed by actions on nodes. The possible actions are detailed on nodes where they can apply on.  
            > Some actions are also possible on the diagram itself. Those ones are described at the root of the response.  
            > The caller must **not** modify the state model by itself, but simply keep it and send it back again on next request.
            > Except in the scenario of applying **MapConfigurations**. Where the state model should be modified with the values from the configuration and sent in the request.
            > The caller interacts with the diagram state only by requesting actions to be performed on the diagram model or its nodes.
          content:
            application/vnd.bdi-services-business-relationship-diagrams-model.v1+json:
              schema:
                $ref: '#/components/schemas/BusinessRelationshipDiagramModelResponse'
              examples:
                BusinessRelationshipDiagram:
                  value: |
                    {
                      "diagramActions": [
                        {
                          "name": "refresh"
                        }
                      ],
                      "model": {
                        "edges": [
                          {
                            "from": {
                              "fieldId": "100003",
                              "shapeId": "1"
                            },
                            "label": "Defined by",
                            "to": {
                              "fieldId": "300003",
                              "shapeId": "3"
                            }
                          },
                          {
                            "from": {
                              "fieldId": "200003",
                              "shapeId": "2"
                            },
                            "label": "Governed by",
                            "to": {
                              "fieldId": "300003",
                              "shapeId": "3"
                            }
                          },
                          {
                            "from": {
                              "fieldId": "200004",
                              "shapeId": "112"
                            },
                            "label": "Defined by",
                            "to": {
                              "fieldId": "300003",
                              "shapeId": "3"
                            }
                          },
                          {
                            "from": {
                              "fieldId": "300003",
                              "shapeId": "3"
                            },
                            "label": "Relates to",
                            "to": {
                              "fieldId": "800003",
                              "shapeId": "8"
                            }
                          }
                        ],
                        "shapes": [
                          {
                            "distance": -1,
                            "fields": [
                              {
                                "actions": [
                                  {
                                    "name": "collapse"
                                  }
                                ],
                                "id": "100001",
                                "level": 0,
                                "name": "Marketing",
                                "typeId": "DWR_ARC_BUSINESS_APPLICATION"
                              },
                              {
                                "actions": [
                                  {
                                    "name": "collapse"
                                  }
                                ],
                                "id": "100002",
                                "level": 1,
                                "name": "Customer Relationships",
                                "typeId": "RBG/GLOSSARY"
                              },
                              {
                                "hasConnections": true,
                                "id": "100003",
                                "level": 2,
                                "name": "Customer Id",
                                "typeId": "RBG/BUSINESS-TERM"
                              }
                            ],
                            "id": "1",
                            "kind": "TABLE"
                          },
                          {
                            "distance": -1,
                            "fields": [
                              {
                                "actions": [
                                  {
                                    "name": "collapse"
                                  }
                                ],
                                "id": "200001",
                                "isHighLighted": false,
                                "level": 0,
                                "name": "Sales",
                                "typeId": "DWR_ARC_BUSINESS_APPLICATION"
                              },
                              {
                                "actions": [
                                  {
                                    "name": "collapse"
                                  }
                                ],
                                "id": "200002",
                                "isHighLighted": false,
                                "level": 1,
                                "name": "Customer Orders",
                                "typeId": "RBG/GLOSSARY"
                              },
                              {
                                "hasConnections": true,
                                "id": "200003",
                                "isHighLighted": false,
                                "level": 2,
                                "name": "Customer",
                                "typeId": "RBG/GLOSSARY"
                              }
                            ],
                            "id": "2",
                            "kind": "TABLE"
                          },
                          {
                            "distance": -1,
                            "fields": [
                              {
                                "actions": [
                                  {
                                    "name": "collapse"
                                  }
                                ],
                                "id": "200001",
                                "isHighLighted": false,
                                "level": 0,
                                "name": "Sales",
                                "typeId": "DWR_ARC_BUSINESS_APPLICATION"
                              },
                              {
                                "actions": [
                                  {
                                    "name": "collapse"
                                  }
                                ],
                                "id": "200002",
                                "isHighLighted": false,
                                "level": 1,
                                "name": "Customer Orders",
                                "typeId": "RBG/GLOSSARY"
                              },
                              {
                                "hasConnections": true,
                                "id": "200004",
                                "isHighLighted": false,
                                "level": 2,
                                "name": "Customer Data",
                                "typeId": "RBG/GLOSSARY"
                              }
                            ],
                            "id": "112",
                            "kind": "TABLE"
                          },
                          {
                            "distance": 0,
                            "fields": [
                              {
                                "actions": [
                                  {
                                    "name": "collapse"
                                  }
                                ],
                                "id": "300001",
                                "isHighLighted": false,
                                "level": 0,
                                "name": "Marketing",
                                "typeId": "DWR_ARC_BUSINESS_APPLICATION"
                              },
                              {
                                "actions": [
                                  {
                                    "name": "collapse"
                                  }
                                ],
                                "id": "300002",
                                "isHighLighted": false,
                                "level": 1,
                                "name": "Customer",
                                "typeId": "RBG/GLOSSARY"
                              },
                              {
                                "hasConnections": true,
                                "id": "300003",
                                "isHighLighted": false,
                                "level": 2,
                                "name": "Customers",
                                "typeId": "RBG/BUSINESS-TERM"
                              }
                            ],
                            "id": "3",
                            "kind": "TABLE"
                          },
                          {
                            "distance": 1,
                            "fields": [
                              {
                                "actions": [
                                  {
                                    "name": "collapse"
                                  }
                                ],
                                "id": "800001",
                                "isHighLighted": false,
                                "level": 0,
                                "name": "Marketing",
                                "typeId": "DWR_ARC_BUSINESS_APPLICATION"
                              },
                              {
                                "actions": [
                                  {
                                    "name": "collapse"
                                  }
                                ],
                                "id": "800002",
                                "isHighLighted": false,
                                "level": 1,
                                "name": "Customer",
                                "typeId": "RBG/GLOSSARY"
                              },
                              {
                                "hasConnections": true,
                                "id": "800003",
                                "isHighLighted": false,
                                "level": 2,
                                "name": "Customers",
                                "typeId": "RBG/BUSINESS-TERM"
                              }
                            ],
                            "id": "8",
                            "kind": "TABLE"
                          }
                        ]
                      },
                      "state": {
                        "scope": "LINKED_BUSINESS_ITEMS",
                        "seedItemIds": [
                          13156553
                        ],
                        "timestamp": 123
                      }
                    }


        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /diagrams/business-relationship-diagrams/options:
    get:
      tags:
        - Diagrams
      operationId: getBusinessRelationshipDiagramOptions
      summary: Gets all the scopes of the business relationship diagrams that can be displayed on the diagram.
      description: |
        Gets all the scopes of the business relationship diagrams that can be displayed on the diagram.
      parameters:
        - name: typeId
          in: query
          description: |
            Provide the type id for which the business relationship diagram options will be retrieved
          required: false
          schema:
            type: string
        - name: displayLangs
          in: query
          description: |
            By convention, the first value corresponds to the primary language. It corresponds to the preferred language of the user, as provided in the user preferences item in the Rochade server.  
            It is also known as the working language, or at least the most important one, for the user agent.
            The remaining values correspond to the additional preferred languages of the user as provided by the user preferences item in the Rochade server.
            They are the additional languages for which the user agent wants the translations.
          required: false
          schema:
            type: array
            items:
              type: string
            example: [ "en","de" ]
      responses:
        '200':
          description: A successful response with the list of scopes and associated levels.
          content:
            application/vnd.bdi-services-business-relationship-diagram-options-response.v1+json:
              schema:
                $ref: '#/components/schemas/BusinessRelationshipDiagramOptionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /diagrams/application-relationship-diagrams:
    post:
      tags:
        - Diagrams
      summary: Generates a diagram with shapes, nodes and edges representing application relationship.
      description: |
        Generates a diagram, containing visible shapes, nodes (inside shapes) and edges (between nodes) representing application relationship.  

        For initial request, a minimal state model structure must be provided with:
        * seed items  

        For subsequent requests, must be provided:
        * the state model obtained from a previous call
        * action to operate on the diagram

        For applying a map configuration on an existing lineage diagram
        * the state model should be modified with the values from the configuration and sent in the request.

        _Note: For technical reasons this is published as POST method, because the request parameters might not fit into the URL._
      operationId: generateApplicationRelationshipDiagram
      requestBody:
        required: true
        content:
          application/vnd.bdi-services-application-relationship-diagram.v1+json:
            schema:
              $ref: '#/components/schemas/ApplicationRelationshipModelRequest'

      responses:
        '200':
          description: |
            successful operation

            For `application/vnd.bdi-services-application-relationship-diagram.v1` content type:  
            > The diagram is described by its model + a state model + possible actions.  
            > The state of the diagram elements (including their expansion state) is managed through the state model.  
            > The expansion state can be changed by actions on nodes. The possible actions are detailed on nodes where they can apply on.  
            > Some actions are also possible on the diagram itself. Those ones are described at the root of the response.  
            > The caller must **not** modify the state model by itself, but simply keep it and send it back again on next request.
            > Except in the scenario of applying **MapConfigurations**. Where the state model should be modified with the values from the configuration and sent in the request.
            > The caller interacts with the diagram state only by requesting actions to be performed on the diagram model or its nodes.
          content:
            application/vnd.bdi-services-application-relationship-diagrams-model.v1+json:
              schema:
                $ref: '#/components/schemas/ApplicationRelationshipDiagramModelResponse'
              examples:
                ApplicationRelationshipDiagram:
                  value: |
                    {
                      "diagramActions": [
                        {
                          "name": "refresh"
                        }
                      ],
                      "model": {
                        "edges": [
                          {
                            "from": {
                              "fieldId": "13163555",
                              "shapeId": "13163555"
                            },
                            "to": {
                              "fieldId": "icon2",
                              "shapeId": "icon2"
                            }
                          },
                          {
                            "from": {
                              "fieldId": "icon2",
                              "shapeId": "icon2"
                            },
                            "to": {
                              "fieldId": "icon5",
                              "shapeId": "icon5"
                            }
                          },
                          {
                            "from": {
                              "fieldId": "icon3",
                              "shapeId": "icon3"
                            },
                            "to": {
                              "fieldId": "icon5",
                              "shapeId": "icon5"
                            }
                          },
                          {
                            "from": {
                              "fieldId": "icon4",
                              "shapeId": "icon4"
                            },
                            "to": {
                              "fieldId": "icon5",
                              "shapeId": "icon5"
                            }
                          },
                          {
                            "from": {
                              "fieldId": "icon5",
                              "shapeId": "icon5"
                            },
                            "to": {
                              "fieldId": "icon6",
                              "shapeId": "icon6"
                            }
                          },
                          {
                            "from": {
                              "fieldId": "icon6",
                              "shapeId": "icon6"
                            },
                            "to": {
                              "fieldId": "icon7",
                              "shapeId": "icon7"
                            }
                          }
                        ],
                        "shapes": [
                          {
                            "distance": -4,
                            "fields": [
                              {
                                "actions": [
                                ],
                                "iconKey": "db01-readonly.svg",
                                "id": "13163555",
                                "level": 0,
                                "name": "Marketo",
                                "typeId": "DWR_ARC_BUSINESS_APPLICATION"
                              }
                            ],
                            "id": "13163555",
                            "kind": "ICON"
                          },
                          {
                            "distance": -3,
                            "fields": [
                              {
                                "actions": [
                                ],
                                "iconKey": "db01-readonly.svg",
                                "id": "2",
                                "level": 0,
                                "name": "Marketo",
                                "typeId": "DWR_ARC_BUSINESS_APPLICATION"
                              }
                            ],
                            "id": "icon2",
                            "kind": "ICON"
                          },
                          {
                            "distance": -3,
                            "fields": [
                              {
                                "actions": [
                                ],
                                "iconKey": "db01-readonly.svg",
                                "id": "3",
                                "level": 0,
                                "name": "SalesForce.dot.com",
                                "typeId": "DWR_ARC_BUSINESS_APPLICATION"
                              }
                            ],
                            "id": "icon3",
                            "kind": "ICON"
                          },
                          {
                            "distance": -3,
                            "fields": [
                              {
                                "actions": [
                                ],
                                "iconKey": "BusAppl-readonly.svg",
                                "id": "4",
                                "level": 0,
                                "name": "Workday",
                                "typeId": "DWR_ARC_BUSINESS_APPLICATION"
                              }
                            ],
                            "id": "icon4",
                            "kind": "ICON"
                          },
                          {
                            "distance": -2,
                            "fields": [
                              {
                                "actions": [
                                ],
                                "iconKey": "chart1-readonly.svg",
                                "id": "5",
                                "level": 0,
                                "name": "Enterprise Data Warehouse",
                                "typeId": "DWR_ARC_BUSINESS_APPLICATION"
                              }
                            ],
                            "id": "icon5",
                            "kind": "ICON"
                          },
                          {
                            "distance": -1,
                            "fields": [
                              {
                                "actions": [
                                ],
                                "id": "6",
                                "level": 0,
                                "name": "Amazon Redshift",
                                "typeId": "DWR_ARC_BUSINESS_APPLICATION"
                              }
                            ],
                            "id": "icon6",
                            "kind": "ICON"
                          },
                          {
                            "distance": 0,
                            "fields": [
                              {
                                "actions": [
                                ],
                                "iconKey": "db01-readonly.svg",
                                "id": "7",
                                "level": 0,
                                "name": "Oracle Reports",
                                "typeId": "DWR_ARC_BUSINESS_APPLICATION"
                              }
                            ],
                            "id": "icon7",
                            "kind": "ICON"
                          }
                        ]
                      },
                      "state": {
                        "scope": "APPLICATION_DEPENDENCIES",
                        "seedItemIds": [
                          131570081
                        ],
                        "timestamp": 123
                      }
                    }


        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /diagrams/application-relationship-diagrams/options:
    get:
      tags:
        - Diagrams
      operationId: getApplicationRelationshipDiagramOptions
      summary: Gets all the scopes of the application relationship diagrams that can be displayed on the diagram.
      description: |
        Gets all the scopes of the application relationship diagrams that can be displayed on the diagram.
      parameters:
        - name: displayLangs
          in: query
          description: |
            By convention, the first value corresponds to the primary language. It corresponds to the preferred language of the user, as provided in the user preferences item in the Rochade server.  
            It is also known as the working language, or at least the most important one, for the user agent.
            The remaining values correspond to the additional preferred languages of the user as provided by the user preferences item in the Rochade server.
            They are the additional languages for which the user agent wants the translations.
          required: false
          schema:
            type: array
            items:
              type: string
            example: [ "en","de" ]
      responses:
        '200':
          description: A successful response with the list of scopes and associated levels.
          content:
            application/vnd.bdi-services-application-relationship-diagram-options-response.v1+json:
              schema:
                $ref: '#/components/schemas/ApplicationRelationshipDiagramOptionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

####################
components:
  securitySchemes:
    BasicAuth: # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
    BearerAuth: # <-- arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes


  responses:
    BadRequest:
      description: A bad request was submitted (HTTP 400)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Unauthorized:
      description: Unauthorized (HTTP 401)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Forbidden:
      description: You are not authorized to perform this action (HTTP 403)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    NotFound:
      description: The specified resource was not found (HTTP 404)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    TooManyRequests:
      description: Too many requests in a given amount of time, aka "rate limiting" (HTTP 429).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    InternalServerError:
      description: An error occurred on the server (HTTP 500)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    NotImplemented:
      description: Method not implemented (HTTP 501)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    ServiceUnavailable:
      description: Server is not ready to handle the request (HTTP 503)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Unexpected:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JerseyError'
    Conflict:
      description: A conflict occurred (HTTP 409)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    PreconditionFailed:
      description: Condition is not fulfilled (HTTP 412)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    PreconditionRequired:
      description: Condition is required (HTTP 428)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'


  schemas:
    # Schema for error response body when Jersey dispatcher triggers the error
    JerseyError:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        path:
          type: string
      required:
        - timestamp
        - status
        - error
        - path

    # Schema for error response body when ASG-Services-SDK maps automatically one of its standard com.asg.services.common.exceptions into response body
    SDKError:
      type: object
      properties:
        code:
          type: string
          pattern: '^\d{3}$'
        message:
          type: string
        correlationId:
          type: string

    Timestamp:
      description: |
        Instant of data retrieval (for cache invalidation).  
        This is an instantaneous point on the time-line (see [Java 8 Instant](https://docs.oracle.com/javase/8/docs/api/java/time/Instant.html)) represented by the number of milliseconds from the epoch of 1970-01-01T00:00:00Z.
      type: integer
      format: int64
      nullable: true

    ShapeKind:
      description: |
        the shape kind:  
        * TABLE: regular data shape with ShapeFields being the table rows. Shape is displayed as table.
        * ICON: regular data shape with an icon and ShapeFields being the table rows. Shape is displayed as table with an icon in header area.
        * DIAMOND: maps data (like transformations). Shape is displayed as diamond.
        * ACTION: special action shape (used in neighbors mode). Shape is displayed with a custom shape.
        * GROUP: group shapes are used as containers for other shapes.
      type: string
      enum: [TABLE, ICON, DIAMOND, ACTION, GROUP]

    ShapeStyle:
      description: |
        optional style markers for diagram shapes:
        * HIGHLIGHTED: shape is highlighted
        * TRANSFORMATION: shape represents Transformations
        * STITCH: shape represents Stitches
        * HIDDEN: Shape represents filtered items. Chained filtered diagram nodes are merged into a single node.
      type: string
      enum: [HIGHLIGHTED, TRANSFORMATION, STITCH, HIDDEN, LEVEL_SEPARATOR]

    Shape:
      description: |
        a diagram shape is a grouping structure that may:
        * either contain one or more nodes with data, each laid out in a tree-like structure according their level (TableShape)
        * or that simply maps data (like transformations), but without any internal structure (DiamondShape)
        * or that is just one special action (ActionShape)
      type: object
      required:
        - kind
      properties:
        kind:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/ShapeKind'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: this is the discriminator that allows to decide if the shape is in fact a TableShape (kind=TABLE), a IconShape (kind=ICON), a DiamondShape (kind=DIAMOND) or an ActionShape (kind=ACTION).
          #allOf:
          #  - $ref: '#/components/schemas/ShapeKind'
          # SWAGGER-UI-IN-END
        id:
          description: unique shape identifier
          type: string
        group:
          description: shape id of the containing group shape, if applicable
          type: string
          nullable: true
        distance:
          description: "distance to seed shape; left side: <0, center (query seed item): 0, right side: >0"
          type: integer
          format: int32
        styles: 
          description: collection of optional style markers
          type: array
          items:
            $ref: '#/components/schemas/ShapeStyle'

      discriminator:
        propertyName: kind
        mapping:
          TABLE: '#/components/schemas/TableShape'
          DIAMOND: '#/components/schemas/DiamondShape'
          ACTION: '#/components/schemas/ActionShape'
          ICON: '#/components/schemas/IconShape'
          GROUP: '#/components/schemas/GroupShape'

    TableShape:
      description: a shape grouping nodes and consisting of one or multiple fields, laid out in a tree-like way
      allOf:
        - $ref: '#/components/schemas/Shape'
        - type: object
          properties:
            fields:
              description: collection of diagram fields, representing the nodes with data
              type: array
              items:
                $ref: '#/components/schemas/ShapeField'

    IconShape:
      description: a shape containing an icon identifier and a shape field
      allOf:
        - $ref: '#/components/schemas/TableShape'
        - type: object
          properties:
            icon:
              description: icon identifier, icon can be retrieved via the icons service
              type: string

    DiamondShape:
      description: a shape grouping nodes with data (without any specific layout)
      allOf:
        - $ref: '#/components/schemas/Shape'
        - type: object
          properties:
            fields:
              description: collection of diagram fields, representing the nodes with data
              type: array
              items:
                $ref: '#/components/schemas/ShapeField'

    ActionShape:
      description: a shape containing a single action, but that action applies to shape field(s) contained into another TableShape(s).
      allOf:
        - $ref: '#/components/schemas/Shape'
        - type: object
          properties:
            label:
              description: action label
              type: string
            action:
              # SWAGGER-UI-OUT-START
              $ref: '#/components/schemas/NodeAction'
              # SWAGGER-UI-OUT-END
              # SWAGGER-UI-IN-START
              #description: node action to be executed
              #allOf:
              #  - $ref: '#/components/schemas/NodeAction'
              # SWAGGER-UI-IN-END
            actionedNodes:
              description: specifies on which node(s) the action will be performed
              type: array
              items:
                $ref: '#/components/schemas/NodeId'

    GroupShape:
      description: a container for other shapes
      allOf:
        - $ref: '#/components/schemas/Shape'
        - type: object
          properties:
            isGroup:
              description: specifies that this shape is a group shape (will always be true)
              type: boolean
              nullable: true

    ShapeFieldStyle:
      description: |
        optional style markers for diagram shape fields:
        * HIGHLIGHTED: shape field is highlighted
        * CONNECTED: shape field has incoming or outgoing edges
      type: string
      enum: [HIGHLIGHTED, CONNECTED]

    ShapeField:
      description: a shape field represents a diagram node, representing one or multiple items
      type: object
      properties:
        id:
          description: field identifier (unique only in combination with shape identifier)
          type: string
        typeId:
          $ref: '#/components/schemas/RochadeItemType'
        name:
          description: item name
          type: string
        level:
          description: field level within the shape (e.g. for indentation)
          type: integer
          format: int32
        styles: 
          description: collection of optional style markers
          type: array
          items:
            $ref: '#/components/schemas/ShapeFieldStyle'
        actions:
          description: available node actions
          type: array
          items:
            $ref: '#/components/schemas/NodeAction'
        data:
          description: optional data (translations, additional properties)
          type: object
      required: [id, typeId, name, level]

    EdgeStyle:
      description: |
        optional style markers for edges:
        * HIGHLIGHTED: edge is highlighted
        * BUSINESS: edge is representing a link between Business Items
        * STITCH: edge is representing a stitched connection
      type: string
      enum: [HIGHLIGHTED, BUSINESS, STITCH, INDIRECT]

    Edge:
      description: a diagram edge connects two nodes (shape fields) and represents one or multiple links
      type: object
      properties:
        from:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/NodeId'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: source node
          #allOf:
          #  - $ref: '#/components/schemas/NodeId'
          # SWAGGER-UI-IN-END
        to:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/NodeId'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: target node
          #allOf:
          #  - $ref: '#/components/schemas/NodeId'
          # SWAGGER-UI-IN-END
        label:
          description: edge label. In business relationship diagrams, the relationship between the nodes is presented in the _label_ property.
          type: string
        styles: 
          description: collection of optional style markers
          type: array
          items:
            $ref: '#/components/schemas/EdgeStyle'
      required: [from, to]

    DiagramLimitId:
      type: string
      enum: [QUERY_LIMIT, IMPORT_ERROR, EDGE_LIMIT_SOFT, SHAPE_LIMIT_SOFT, SHAPE_LIMIT_HARD]
      description: |
        Limit identifier, specifying the reason for the incomplete response.
        * `QUERY_LIMIT` the result is incomplete due to applied query limits (maxHits, maxTime or depth).
        * `IMPORT_ERROR` the result might be  incomplete due to import error from external systems.
        * `EDGE_LIMIT_SOFT` the result is simplified due to applied edge limit.
        * `SHAPE_LIMIT_SOFT` the result is simplified due to applied shape limit.
        * `SHAPE_LIMIT_HARD` the result is incomplete due to applied shape limit.

    DiagramLimit:
      type: object
      properties:
        limitId: 
          $ref: '#/components/schemas/DiagramLimitId'
        value:
          description: the limit value
          type: integer
          format: int32
          nullable: true
        message:
          description: plain text message that could be displayed to the user
          type: string

    DiagramModelStatus:
      description: the diagram model status
      type: object
      properties:
        stats:
          description: statistics like number of shapes, edges, etc. for informational purposes
          type: object
          additionalProperties:
            description: key value pairs
            type: integer
            format: int32
          nullable: true
        limits:
          description: information about applied limits
          type: array
          items:
            $ref: '#/components/schemas/DiagramLimit'
          nullable: true
          
    DiagramModel:
      description: the diagram model, containing visible shapes, shape fields (nodes) and edges
      type: object
      properties:
        shapes:
          description: the shapes group the nodes, which themselves represent the physical items
          type: array
          items:
            $ref: '#/components/schemas/Shape'
        edges:
          description: the edges represent the physical links
          type: array
          items:
            $ref: '#/components/schemas/Edge'
        status:
          $ref: '#/components/schemas/DiagramModelStatus'

    NodeId:
      description: unique identifier for a node, combining shape and (optional) field identifiers
      type: object
      properties:
        shapeId:
          type: string
        fieldId:
          type: string
          nullable: true

    NodeActionId:
      type: string
      enum: [EXPAND_LEFT, EXPAND_RIGHT, EXPAND, COLLAPSE, SHOW, HIDE, HIGHLIGHT_ROUTE, ISOLATE_ROUTE, LEVEL_SEPARATOR, LIMITED]
      description: |
        Action identifier, for actions that can be performed on diagram nodes. Depending on the diagram mode, only some actions may be supported.
        * `EXPAND_LEFT` this action id should be used, to see additional items on left side to the node where the action is performed. This action is applicable when the diagram scope level is set to `NEIGHBOURS`.
        * `EXPAND_RIGHT` this action id should be used, to see additional items on right side to the node where the action is performed. This action is applicable when the diagram scope level is set to `NEIGHBOURS`.
        * `EXPAND` this action id should be used to see the child item with in the node, when the item in the node is in collapsed state.
        * `COLLAPSE` this action id should be used to hide the child item with in the node, when the item in the node is in expanded state.
        * `SHOW` this action id should be used, to display a node which was hidden because of the `FILTER` diagram action, to show only nodes that matching filtering criteria.
        * `HIDE` this action id should be used, to hide any node in the diagram.
        * `HIGHLIGHT_ROUTE` this action id should be used, to highlight the paths that includes the selected Node.
        * `ISOLATE_ROUTE` this action id should be used, to display the diagram with the paths that includes the selected Node only.
        * `LEVEL_SEPARATOR` this pseudo action connects adjacent shapes in hops mode          
        * `LIMITED` this pseudo action represents the number of remaining shapes when reaching the shape limit.

    NodeAction:
      description: combination of node action identifier and optional data
      type: object
      properties:
        name:
          $ref: '#/components/schemas/NodeActionId'
        data:
          description: action specific, optional data
          type: string
          nullable: true

    NodeActionSeed:
      description: node action seed (for UI representation)
      allOf:
        - $ref: '#/components/schemas/NodeId'
        - type: object
          properties:
            label:
              description: the label
              type: string

    NodeActionSeedProperties:
      description: properties for node action seeds
      type: object
      properties:
        nodeActionSeedItemIds:
          description: Map from NodeActionId to list of seed item identifiers (for BDI).
          type: object
          additionalProperties:
            description: list of seed item identifiers for the specific node action id
            type: array
            items:
              type: string
          nullable: true
        nodeActionSeeds:
          description: Map from NodeActionId to list of seed nodes. This map contains only a subset of node action Ids that are required for the UI.
          type: object
          additionalProperties:
            description: list of seed nodes for the specific node action id
            type: array
            items:
              $ref: '#/components/schemas/NodeActionSeed'
          nullable: true
        
    DiagramActionId:
      type: string
      enum: [REFRESH, SET_SCOPE, SET_ABSTRACTION_LEVEL, SET_WITH_TRANSFORMATIONS, SET_WITH_DETAILS, FILTER, RESET_EXPANSION_STATES, RESET_TRACE]
      description: |
        Action identifier, for actions that can be performed globally on the whole diagram.
        * `REFRESH` The action id should be used to re-fetch the diagram in current state.
        * `SET_SCOPE` The action id should be used to update the diagram based on the changed scope value.
        * `SET_ABSTRACTION_LEVEL` The action id should be used to update the diagram based on the changed abstraction level.
        * `SET_WITH_TRANSFORMATIONS` The action id should be used to update the diagram when display of transformations is toggled from on to off or vice-versa.
        * `SET_WITH_DETAILS` The action id should be used to update the diagram when the display of details is toggled from on to off or vice-versa.
        * `FILTER` the action should be used to update the diagram to display items that satisfies the filtering conditions only.
    

    DiagramAction:
      description: combination of diagram action identifier and optional data
      type: object
      properties:
        name:
          $ref: '#/components/schemas/DiagramActionId'
        data:
          type: string
          nullable: true
          description: |
            action specific, optional data
            * when _DiagramActionId_ is set to `REFRESH`, the data property is optional or can be set as "".
            * when _DiagramActionId_ is set to `SET_SCOPE`, the data property value should be `#/components/schemas/LineageScopeIdentifier`.
            * when _DiagramActionId_ is set to `SET_ABSTRACTION_LEVEL`, the data property value should be `#/components/schemas/LineageLevelIdentifier`.
            * when _DiagramActionId_ is set to `SET_WITH_TRANSFORMATIONS`, the data property value should be a boolean value represented in string format.When _true_ , transformations are included in the diagram.
            * when _DiagramActionId_ is set to `SET_WITH_DETAILS`, the data property value should be a boolean value represented in string format.When _true_ details for each node are included in the diagram.
            * when _DiagramActionId_ is set to `FILTER`, the data property value should url encoded string representing the schema `#/components/schemas/SelectedMapFilters` 
        filterData:
          $ref: '#/components/schemas/SelectedMapFilters'

    LineageDiagramState:
      description: |
        The diagram state.  
        
        _Usage Note: The diagram state is maintained exclusively by the service itself.  
        The service will calculate the new state based on request and return it updated in the response.  
        The caller only has to store it and, on next call, re-send the diagram state as it has been provided by previous call._
      allOf:
        - type: object
          properties:
            seedItemIds:
              description: query seed item identifiers
              type: array
              items:
                type: integer
                format: int64
            scope:
              # SWAGGER-UI-OUT-START
              $ref: '#/components/schemas/LineageScopeIdentifier'
              # SWAGGER-UI-OUT-END
              # SWAGGER-UI-IN-START
              #description: active diagram scope
              #allOf:
              #  - $ref: '#/components/schemas/LineageScopeIdentifier'
              # SWAGGER-UI-IN-END
            abstractionLevel:
              # SWAGGER-UI-OUT-START
              $ref: '#/components/schemas/LineageLevelIdentifier'
              # SWAGGER-UI-OUT-END
              # SWAGGER-UI-IN-START
              #description: active base abstraction level
              #allOf:
              #  - $ref: '#/components/schemas/LineageLevelIdentifier'
              #nullable: true
              # SWAGGER-UI-IN-END
            withTransformations:
              description: toggle the display of transformations, on or off
              type: boolean
              nullable: true
            withDetails:
              description: toggle the display of details, on or off
              type: boolean
              nullable: true
            timestamp:
              $ref: '#/components/schemas/Timestamp'
            filters:
              $ref: '#/components/schemas/SelectedMapFilters'
        - $ref: '#/components/schemas/NodeActionSeedProperties'

    LineageDiagramModelRequest:
      description: the request structure for a lineage diagram model API call
      type: object
      properties:
        state:
          $ref: '#/components/schemas/LineageDiagramState'
        diagramAction:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/DiagramAction'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: Action to perform at diagram level (i.e., globally). Available actions are listed within the response.
          #allOf:
          #  - $ref: '#/components/schemas/DiagramAction'
          #nullable: true
          # SWAGGER-UI-IN-END
        nodeAction:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/NodeAction'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: |
          #  Action to perform at node level.
          #  Must be used together with 'actionedNodes' property.
          #  Available actions are listed within the response on shape fields (aka nodes).
          #allOf:
          #  - $ref: '#/components/schemas/NodeAction'
          #nullable: true
          # SWAGGER-UI-IN-END
        actionedNodes:
          description: |
            Parameter for the 'nodeAction' property, specifying on which node(s) the action must be performed.
          type: array
          items:
            $ref: '#/components/schemas/NodeId'
          nullable: true

    LineageDiagramModelResponse:
      description: the response structure for a lineage diagram model API call
      allOf:
        - $ref: '#/components/schemas/DiagramModelResponse'
        - type: object
          properties:
            state:
              $ref: '#/components/schemas/LineageDiagramState'

    HATEOASLinks:
      description: HATEOAS links
      type: array
      items:
        $ref: '#/components/schemas/HATEOASLink'

    HATEOASLink:
      description: HATEOAS link
      type: object
      properties:
        rel:
          description: the relation between the resource associated with this HATEOAS link and the resource designated by the target href
          type: string
        method:
          description: HTTP method to use when invoking href
          type: string
          enum: [ GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH ]
        href:
          description: the URL to follow to obtain the related resource
          type: string
          format: uri
      required:
        - rel
          method
          href
      example:
        rel: "self"
        method: GET
        href: /rest/diagrams/filters

    TranslatedLabel:
      description: |
        The label field value in a contextual language.
      type: object
      properties:
        label:
          type: string
          description: The label value in contextual language.
      example:
        label: "Finance"

    LabelTranslations:
      description: |
        Describes the values of the label fields in additional languages (other than the 'primary' one).  
        Keys are languages in ISO 639-1 format (two-letter codes).
        A missing language key indicates there are no translations available for the label field value in that requested language.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TranslatedLabel'
      example:
        en:
          label: "Finance"
        de:
          label: "Finanzen"

    ItemType:
      type: string
      description: |
        The type of the item, to display in the User Interface. Based on the _type_ the look and feel of the
        items differs for the users.
      enum: [ Glossary, Context, Policy, Process, Rule, Standard, Asset, Business Term, CDE,
              Application, DB System, Database, Schema, Column, Report Package, Report Schema,
              Report Structure, Report, Table View, Table, Field, ETL Task, File, Other ]

    RochadeItemType:
      type: string
      description: |
        The unique identifier of the item type in Rochade.
        For any filtering the _typeId_value should be used,
        when sending the request.

    MapFilterItem:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the map filter item.
        label:
          type: string
          description: The map filter label.
        type:
          $ref: '#/components/schemas/ItemType'
        typeId:
          $ref: '#/components/schemas/RochadeItemType'
        translations:
          type: array
          description: |
            The translations of the search filter label in additional languages (other than the 'primary' one).  
            Keys are languages in ISO 639-1 format (two-letter codes).
          items:
            $ref: '#/components/schemas/LabelTranslations'
        children:
          type: array
          description: The list of sub categories available under the map filter item.
          items:
            # SWAGGER-UI-OUT-START
            $ref: '#/components/schemas/MapFilterItem'
            # SWAGGER-UI-OUT-END
            # SWAGGER-UI-IN-START
            #type: object
            # SWAGGER-UI-IN-END
      required: [id, label, type, typeId]
      example:
        id: "1"
        label: "Finance"
        type: "Application"
        typeId: DWR_ARC_BUSINESS_APPLICATION
        translations:
          - en:
              label: "Finance"
            de:
              label: "Finanzen"
        children:
          - id: 2
            label: "Accounts"
            type: "Asset"
            typeId: ASSET
            translations:
              - en:
                  label: "Accounts"
                de:
                  label: "Konten"

    MarkerItemIdentifier:
      type: string
      enum: [CDE,PII,"*"]
      description: |
        Describes the unique identifier of the markers. Possible values are,
        * `CDE` Describes that item is marked as critical data element. Linked by one or multiple Business items of type Critical Data Element.
        * `PII` Describes that item is marked containing Personal Identifiable Information.
        * `*` Means any of the above values and can be used in search. 

    MarkerItem:
      type: object
      properties:
        id:
          $ref : '#/components/schemas/MarkerItemIdentifier'
        label:
          type: string
          description: The actual label of the marker in the primary language.
        translations:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/LabelTranslations'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: |
          #  The translations of the marker label in additional languages (other than the 'primary' one).  
          #  Keys are languages in ISO 639-1 format (two-letter codes).
          #allOf:
          #  - $ref: '#/components/schemas/LabelTranslations'
          # SWAGGER-UI-IN-END
      required: [ id, label]
      example:
        id: "CDE"
        label: "CDE"
        translations:
          - de:
              label: "CDE"

    Language:
      description: Identifier of language in ISO 639-1 format (two-letter codes)
      type: string
      pattern: '^[a-z]{2}$'

    ResponseLangs:
      description: The languages for which translations are available into this response.
      type: object
      properties:
        primary:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/Language'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: |
          #  This is the language requested at first position in 'displayLangs' parameter, OR if that last is empty,
          #  it corresponds to the preferred language of the user as provided by the user preferences item in Rochade server.
          #  This is also known as the working language, or at least the most important one, for the user agent.
          #allOf:
          #  - $ref: '#/components/schemas/Language'
          # SWAGGER-UI-IN-END
        default:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/Language'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: |
          #  The default language in ISO 639-1 format (two-letter codes) that is associated with the Rochade database.
          #allOf:
          #  - $ref: '#/components/schemas/Language'
          # SWAGGER-UI-IN-END
        extras:
          description: |
            They are the languages requested in _displayLangs_ parameter after the first position, OR if that last is empty,
            they correspond to the additional preferred languages of the user as provided by the user preferences item in Rochade server.  
            They are known as additional languages for which the user agent wants the translations.
          type: array
          items:
            $ref: '#/components/schemas/Language'
      example:
        primary: de
        default: en
        extras: [fr,de]

    MapFiltersResponse:
      description: |
        Describes the list of map filters available to the user, to refine the items in the diagram.
      type: object
      properties:
        langs:
          $ref: '#/components/schemas/ResponseLangs'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/MapFilterItem'
        applications:
          type: array
          items:
            $ref: '#/components/schemas/MapFilterItem'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/MapFilterItem'
        markers:
          type: array
          items:
            $ref: '#/components/schemas/MarkerItem'
        links:
          $ref: '#/components/schemas/HATEOASLinks'
      required: [langs, groups, applications, tags, markers, links]
      example:
        langs:
          primary: de
          default: en
          extras: [ fr,de ]
        groups:
          - id: "1"
            label: "Finance"
            type: "Application"
            typeId: "DWR_ARC_BUSINESS_APPLICATION"
            translations:
              - en:
                  label: "Finance"
                de:
                  label: "Finanzen"
            children:
              - id: "2"
                label: "Accounts"
                type: "Asset"
                typeId: "ASSET"
                translations:
                  - en:
                      label: "Accounts"
                    de:
                      label: "Konten"
              - id: "3"
                label: "Banking"
                type: "Context"
                typeId: "RBG/CONTEXT"
          - id: "4"
            label: "Marketing"
            children:
              - id: "5"
                label: "Digital Marketing"
              - id: "6"
                label: "Content marketing"
        applications:
          - id: "43"
            label: "Customer Loyalty Program"
          - id: "46"
            label: "Customer Relation Management"
        tags:
          - id: "331"
            label: "GDPR"
            type: "Tag"
            typeId: "DWR_TAG"
          - id: "332"
            label: "Tag A"
            type: "Tag"
            typeId: "DWR_TAG"
        markers:
          - id: "CDE"
            label: "CDE"
          - id: "PII"
            label: "PII"

    LineageLevelIdentifier:
      type: string
      enum: [APPLICATION, SYSTEM, SCHEMA, STRUCTURE, ELEMENT]
      description: |
        description: |
          Describes the unique identifier to identify the level of details to be displayed in the lineage diagram. Possible values are  
          * `APPLICATION`
          * `SYSTEM`
          * `SCHEMA`
          * `STRUCTURE`
          * `ELEMENT`

    LineageLevel:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/LineageLevelIdentifier'
        label:
          type: string
          description: describes the level details to be displayed in the lineage diagram in primary language.
        translations:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/LabelTranslations'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: |
          #  The translations of the lineage scope label in additional languages (other than the 'primary' one).
          #  Keys are languages in ISO 639-1 format (two-letter codes).
          #allOf:
          #  - $ref: '#/components/schemas/LabelTranslations'
          # SWAGGER-UI-IN-END
      required: [ label, id ]
      example:
        id: ELEMENT
        label: Element
        translations:
          de:
            label: "Element"
          en:
            label: "Element"

    LineageScopeIdentifier:
      type: string
      enum: [NEIGHBORS, SOURCE_TO_TARGET, FORWARD, BACKWARD, END_TO_END]
      description: |
        Describes the unique identifier of the scope of the lineage diagram. Possible values are  
          * `NEIGHBORS` : The diagram displays only the expanded nodes and their direct neighbors. The seed item is always considered as expanded, other nodes can be expanded by the user manually. _NEIGHBORS_ is the default scope for the lineage diagram.
          * `SOURCE_TO_TARGET` : Displays the data flow from the sources to the seed item (upstream without intermediate nodes).
          * `FORWARD` : The forward lineage from the seed item is displayed to the user. Also referred to as `Downstream`. 
          * `BACKWARD` : The backward lineage from the seed item is displayed to the user. Also referred to as `Upstream`.
          * `END_TO_END` : The lineage diagram comprises of all the navigations from the source items to the seed item and from seed item to the target item. Also referred to as `Full Lineage`.

    LineageScopeValue:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/LineageScopeIdentifier'
        label:
          type: string
          description: describes the scope of the lineage diagram in primary language.
        translations:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/LabelTranslations'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: |
          #  The translations of the lineage level label in additional languages (other than the 'primary' one).
          #  Keys are languages in ISO 639-1 format (two-letter codes).
          #allOf:
          #  - $ref: '#/components/schemas/LabelTranslations'
          # SWAGGER-UI-IN-END
      required: [ label, id ]
      example:
        id: NEIGHBORS
        label: Neighbours
        translations:
          de:
            label: "Nachbarn"
          en:
            label: "Neighbours"

    LineageOption:
      description: "Describes of the scope of the lineage diagram."
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/LineageScopeValue'
        levels:
          type: array
          items:
            $ref: '#/components/schemas/LineageLevel'
      required: [scope,levels]
      example:
        scope:
          id: NEIGHBORS
          label: Neighbours
          translations:
            de:
              label: "Nachbarn"
            en:
              label: "Neighbours"
        levels:
          - label: Element
            id: ELEMENT
            translations:
              de:
                label: "Element"
              en:
                label: "Element"
          - label: Structure
            id: STRUCTURE
            translations:
              de:
                label: "Struktur"
              en:
                label: "Structure"

    LineageOptionsResponse:
      description: "Describes the scopes and respective levels applicable for the lineage diagram."
      type: object
      properties:
        options:
          type: array
          items:
            $ref: '#/components/schemas/LineageOption'
        links:
          $ref: '#/components/schemas/HATEOASLinks'

    FilterIds:
      description: list of unique identifiers of the filter items.
      type: array
      items:
        type: string

    SelectedMapFilters:
      description: Describes the map filters that user selected and wanted to save.
      type: object
      properties:
        groups:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/FilterIds'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: list of unique identifiers of the items selected to filter under groups.
          #allOf:
          #  - $ref: '#/components/schemas/FilterIds'
          # SWAGGER-UI-IN-END
        applications:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/FilterIds'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: list of unique identifiers of the items selected to filter under applications.
          #allOf:
          #  - $ref: '#/components/schemas/FilterIds'
          # SWAGGER-UI-IN-END
        tags:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/FilterIds'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: list of unique identifiers of the items selected to filter under tags.
          #allOf:
          #  - $ref: '#/components/schemas/FilterIds'
          # SWAGGER-UI-IN-END
        markers:
          type: array
          items:
            # SWAGGER-UI-OUT-START
            $ref: '#/components/schemas/MarkerItemIdentifier'
            # SWAGGER-UI-OUT-END
            # SWAGGER-UI-IN-START
            #description: list of unique identifiers of the items selected to filter under markers.
            #allOf:
            #  - $ref: '#/components/schemas/MarkerItemIdentifier'
            # SWAGGER-UI-IN-END
      example:
        groups: [15,20]
        applications: [1,2]
        tags: [3,4]
        markers: ["CDE","PII"]

    BaseConfiguration:
      discriminator:
        propertyName: configType
      properties:
        id:
          type: string
          description: "base64 encoded unique identifier , to identify the saved configuration."
        name:
          type: string
          description: "Name with which the configuration wil be saved."
        configType:
          type: string
          enum: [TECHNICAL_LINEAGE_CONFIGURATION, APPLICATION_DIAGRAM_CONFIGURATION]
        filters:
          $ref: '#/components/schemas/SelectedMapFilters'
      required: [name, configType]

    TechnicalLineageConfiguration:
      description: |
        Describes the map filters and other configurations user wanted to save.
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseConfiguration'
      properties:
        scope:
          $ref: '#/components/schemas/LineageScopeIdentifier'
        level:
          $ref: '#/components/schemas/LineageLevelIdentifier'
        withTransformations:
          description: "Describes if the transformations need to be included in the lineage diagram."
          type: boolean
        withDetails:
          description: "Describes if details need to be included in the lineage diagram."
          type: boolean
      example:
        id: "1d816b1d-78ed-4719-ab60-5b1cae81501a"
        name: "My Saved Configuration"
        scope: "NEIGHBORS"
        level: "STRUCTURE"
        withTransformations: true
        withDetails: true
        filters:
          groups: [15,20]
          applications: [1,2]
          tags: [3,4]
          markers: [CDE,PII]

    ApplicationScopeValue:
      description: "Describes of the scope of the application diagram."
      type: string
      enum: [ APPLICATION_STRUCTURE, APPLICATION_DEPENDENCIES ]

    ApplicationDiagramConfiguration:
      description: |
        Describes the map filters and other configurations user wanted to save.
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseConfiguration'
      properties:
        scope:
          $ref: '#/components/schemas/ApplicationScopeValue'
        withDetails:
          description: "Describes if details need to be included in the lineage diagram."
          type: boolean
      example:
        id: "1d816b1d-78ed-4719-ab60-5b1cae81501b"
        name: "My Saved Configuration"
        scope: "APPLICATION_STRUCTURE"
        withDetails: true
        filters:
          groups: [15,20]
          applications: [1,2]
          tags: [3,4]
          markers: [CDE,PII]

    MapConfiguration:
      type: object
      description: Describes the map filters and other configurations user wanted to save.
      oneOf:
        - $ref: '#/components/schemas/TechnicalLineageConfiguration'
        - $ref: '#/components/schemas/ApplicationDiagramConfiguration'
      properties:
        associationLevel:
          $ref: '#/components/schemas/AssociationLevel'
      example:
        id: "1d816b1d-78ed-4719-ab60-5b1cae81501a"
        name: "My Saved Configuration"
        scope: "NEIGHBORS"
        level: "STRUCTURE"
        withTransformations: true
        withDetails: true
        filters:
          groups: [15,20]
          applications: [1,2]
          tags: [3,4]
          markers: [CDE,PII]
        associationLevel:
          level: ITEM_TYPE
          value: COLUMN

    MapConfigurationResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/MapConfiguration'
      properties:
        links:
          $ref: '#/components/schemas/HATEOASLinks'
      example:
        id: "1d816b1d-78ed-4719-ab60-5b1cae81501a"
        name: "My Saved Configuration"
        scope: "NEIGHBORS"
        level: "STRUCTURE"
        includeTransformations: true
        filters:
          groups: [15,20]
          applications: [1,2]
          tags: [3,4]
          markers: [CDE,PII]
        associationLevel:
          level: ITEM_TYPE
          value: COLUMN
        links:
          rel: "self"
          method: POST
          href: /rest/diagrams/configurations

    MapConfigurationsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MapConfigurationResponse'
        links:
          $ref: '#/components/schemas/HATEOASLinks'

    ConfigMapAssociationLevel:
      type: string
      enum: [ ITEM_TYPE, ABS_PATH ]
      description: |
        The level at which user want to save the current map configuration,
        When a user searches for an item, saved map configurations whose _level_ and _value_ matches the respective values of the searched item are displayed to the user.
        For Example if map configuration is saved at itemId level, then saved map configurations will be displayed only when user searches for the same item , where he saved the map configuration.
        if map configuration is saved at the ITEM_TYPE level, then the saved map configurations will be displayed to the user if the item type of the searched item matches with the item type value on which the map configuration is saved.


    AssociationLevel:
      type: object
      properties:
        level:
          $ref: '#/components/schemas/ConfigMapAssociationLevel'
        value:
          description: |
            The value of the item attributes corresponding to the level.
            `Note`: set the value property with the value of itemId when the _level_ is set as `absPath`
          type: string
      required: [level,value]

    BusinessRelationshipScopeIdentifier:
      type: string
      enum: [ ALL_LINKED_ITEMS, LINKED_BUSINESS_ITEMS, LINKED_TECHNICAL_ITEMS ]
      description: |
        Describes the unique identifier of the scope of the business relationship diagram. Possible values are  
          * `ALL_LINKED_ITEMS` : Displays both technical and business items and their respective relationship with the seed item.
          * `LINKED_BUSINESS_ITEMS` : Displays the business items and their corresponding relationship with the seed item.
          * `LINKED_TECHNICAL_ITEMS` : Displays the technical items and their corresponding relationship with the seed item.
        

    BusinessRelationshipScope:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/BusinessRelationshipScopeIdentifier'
        label:
          type: string
          description: describes the scope of the business relationship diagram in primary language.
        translations:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/LabelTranslations'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: |
          #  The translations of the business relationship diagram level label in additional languages (other than the 'primary' one).
          #  Keys are languages in ISO 639-1 format (two-letter codes).
          #allOf:
          #  - $ref: '#/components/schemas/LabelTranslations'
          # SWAGGER-UI-IN-END
      required: [ label, id ]
      example:
        id: LINKED_BUSINESS_ITEMS
        label: Linked Business Items
        translations:
          de:
            label: "Verknüpfte Geschäftselemente"


    BusinessRelationshipOption:
      description: "Describes the scope of the business relationship diagram."
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/BusinessRelationshipScope'
      required: [scope]
      example:
        scope:
          id: LINKED_BUSINESS_ITEMS
          label: Linked Business Items
          translations:
            de:
              label: "Verknüpfte Geschäftselemente"

    BusinessRelationshipDiagramState:
      description: |
        The diagram state.  

        _Usage Note: The diagram state is maintained exclusively by the service itself.  
        The service will calculate the new state based on request and return it updated in the response.  
        The caller only has to store it and, on next call, re-send the diagram state as it has been provided by previous call._
      allOf:
        - type: object
          properties:
            seedItemIds:
              description: query seed item identifiers
              type: array
              items:
                type: integer
                format: int64
            scope:
              # SWAGGER-UI-OUT-START
              $ref: '#/components/schemas/BusinessRelationshipScopeIdentifier'
              # SWAGGER-UI-OUT-END
              # SWAGGER-UI-IN-START
              #description: active diagram scope
              #allOf:
              #  - $ref: '#/components/schemas/BusinessRelationshipScopeIdentifier'
              # SWAGGER-UI-IN-END
            withDetails:
              description: toggle the display of details, on or off
              type: boolean
              nullable: true
            timestamp:
              $ref: '#/components/schemas/Timestamp'
            filters:
              $ref: '#/components/schemas/SelectedMapFilters'
        - $ref: '#/components/schemas/NodeActionSeedProperties'

    BusinessRelationshipModelRequest:
      description: the request structure for a business relationship diagram model API call
      type: object
      properties:
        state:
          $ref: '#/components/schemas/BusinessRelationshipDiagramState'
        diagramAction:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/DiagramAction'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: Action to perform at diagram level (i.e., globally). Available actions are listed within the response.
          #allOf:
          #  - $ref: '#/components/schemas/DiagramAction'
          #nullable: true
          # SWAGGER-UI-IN-END
        nodeAction:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/NodeAction'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: |
          #  Action to perform at node level.
          #  Must be used together with 'actionedNodes' property.
          #  Available actions are listed within the response on shape fields (aka nodes).
          #allOf:
          #  - $ref: '#/components/schemas/NodeAction'
          #nullable: true
          # SWAGGER-UI-IN-END
        actionedNodes:
          description: |
            Parameter for the 'nodeAction' property, specifying on which node(s) the action must be performed.
          type: array
          items:
            $ref: '#/components/schemas/NodeId'
          nullable: true

    DiagramModelResponse:
      description: common response model for all the diagrams
      type: object
      properties:
        model:
          $ref: '#/components/schemas/DiagramModel'
        diagramActions:
          description: available diagram actions
          type: array
          items:
            $ref: '#/components/schemas/DiagramAction'
        globalNodeActions:
          description: |
            Actions that are applicable to all the nodes in diagram.  
            Actions applicable to a specific node is union of
            > * node actions specified in diagram model
            > * actions specified in global node actions.
          type: array
          items:
            $ref: '#/components/schemas/NodeAction'
        links:
          $ref: '#/components/schemas/HATEOASLinks'


    BusinessRelationshipDiagramModelResponse:
      description: the response structure for a business relationship diagram model API call
      type: object
      allOf:
        - $ref: '#/components/schemas/DiagramModelResponse'
        - type: object
          properties:
            state:
              $ref: '#/components/schemas/BusinessRelationshipDiagramState'


    BusinessRelationshipDiagramOptionsResponse:
      description: "Describes the scopes and respective levels applicable for the business relationship diagram."
      type: object
      properties:
        options:
          type: array
          items:
            $ref: '#/components/schemas/BusinessRelationshipOption'
        links:
          $ref: '#/components/schemas/HATEOASLinks'

    ApplicationRelationshipScopeIdentifier:
      type: string
      enum: [ APPLICATION_DEPENDENCIES ]
      description: |
        Describes the unique identifier of the scope of the application relationship diagram. Possible values are  
          * `APPLICATION_DEPENDENCIES` : Displays the dependencies between the application that are based on manual input.


    ApplicationRelationshipScope:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ApplicationRelationshipScopeIdentifier'
        label:
          type: string
          description: describes the scope of the application relationship diagram in primary language.
        translations:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/LabelTranslations'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: |
          #  The translations of the application relationship diagram level label in additional languages (other than the 'primary' one).
          #  Keys are languages in ISO 639-1 format (two-letter codes).
          #allOf:
          #  - $ref: '#/components/schemas/LabelTranslations'
          # SWAGGER-UI-IN-END
      required: [ label, id ]
      example:
        id: APPLICATION_DEPENDENCIES
        label: Application Dependencies
        translations:
          de:
            label: "Anwendung Abhängigkeiten"

    ApplicationRelationshipOption:
      description: "Describes the scope of the application relationship diagram."
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/ApplicationRelationshipScope'
      required: [ scope ]
      example:
        scope:
          id: APPLICATION_DEPENDENCIES
          label: Application Dependencies
          translations:
            de:
              label: "Anwendung Abhängigkeiten"

    ApplicationRelationshipDiagramOptionsResponse:
      description: "Describes the scopes and respective levels applicable for the application relationship diagram."
      type: object
      properties:
        options:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationRelationshipOption'
        links:
          $ref: '#/components/schemas/HATEOASLinks'

    ApplicationRelationshipDiagramModelResponse:
      description: the response structure for a application relationship diagram model API call
      type: object
      allOf:
        - $ref: '#/components/schemas/DiagramModelResponse'
        - type: object
          properties:
            state:
              $ref: '#/components/schemas/ApplicationRelationshipDiagramState'

    ApplicationRelationshipDiagramState:
      description: |
        The diagram state.  

        _Usage Note: The diagram state is maintained exclusively by the service itself.  
        The service will calculate the new state based on request and return it updated in the response.  
        The caller only has to store it and, on next call, re-send the diagram state as it has been provided by previous call._
      type: object
      properties:
        seedItemIds:
          description: query seed item identifiers
          type: array
          items:
            type: integer
            format: int64
        scope:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/ApplicationRelationshipScopeIdentifier'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: active diagram scope
          #allOf:
          #  - $ref: '#/components/schemas/ApplicationRelationshipScopeIdentifier'
          # SWAGGER-UI-IN-END
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    ApplicationRelationshipModelRequest:
      description: the request structure for a application relationship diagram model API call
      type: object
      properties:
        state:
          $ref: '#/components/schemas/ApplicationRelationshipDiagramState'
        diagramAction:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/DiagramAction'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: Action to perform at diagram level (i.e., globally). Available actions are listed within the response.
          #allOf:
          #  - $ref: '#/components/schemas/DiagramAction'
          #nullable: true
          # SWAGGER-UI-IN-END
