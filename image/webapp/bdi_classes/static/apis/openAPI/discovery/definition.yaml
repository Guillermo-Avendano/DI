openapi: "3.0.0"
info:
  version: 1.0.0
  title: Discovery
  description: Discovery OpenAPI definition

security:
  - BasicAuth: []
  - BearerAuth: []

servers:
  - url: '/rest'
tags:
  - name: Discovery

paths:
  /resources:
    get:
      tags:
        - Discovery
      operationId: getResources
      summary: Get all resources applicable for the logged-in user
      description: |
        This is the first API call from the client.
        It returns the list of hateoas links that are applicable for the
        user logged-in. Based on the returned hateoas links, the client
        determines whether to show/hide the navigation items.
      responses:
        '200':
          description: The list of applicable resources.
          content:
            application/vnd.bdi-services-discovery.v1+json:
              schema:
                $ref: '#/components/schemas/ResourceResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'



####################
components:
  securitySchemes:
    BasicAuth: # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
    BearerAuth: # <-- arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes


  responses:
    BadRequest:
      description: A bad request was submitted (HTTP 400)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Unauthorized:
      description: Unauthorized (HTTP 401)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Forbidden:
      description: You are not authorized to perform this action (HTTP 403)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    NotFound:
      description: The specified resource was not found (HTTP 404)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Conflict:
      description: A conflict occurred (HTTP 409)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    PreconditionFailed:
      description: Condition is not fulfilled (HTTP 412)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    PreconditionRequired:
      description: Condition is required (HTTP 428)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    TooManyRequests:
      description: Too many requests in a given amount of time, aka "rate limiting" (HTTP 429).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    InternalServerError:
      description: An error occurred on the server (HTTP 500)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    NotImplemented:
      description: Method not implemented (HTTP 501)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    ServiceUnavailable:
      description: Server is not ready to handle the request (HTTP 503)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Unexpected:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JerseyError'


  schemas:
    HATEOASLinks:
      description: HATEOAS links
      type: array
      items:
        $ref: '#/components/schemas/HATEOASLink'
    HATEOASLink:
      description: HATEOAS link
      type: object
      properties:
        rel:
          description: the relation between the resource associated with this HATEOAS link and the resource designated by the target href
          type: string
        method:
          description: HTTP method to use when invoking href
          type: string
          enum: [ GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH ]
        href:
          description: the URL to follow to obtain the related resource
          type: string
          format: uri
    ResourceResult:
      description: the list of HATEOAS links to the resources applicable for the logged in user.
      type: object
      properties:
        links:
          $ref: '#/components/schemas/HATEOASLinks'
      required:
        - links
    # Schema for error response body when Jersey dispatcher triggers the error
    JerseyError:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        path:
          type: string
      required:
        - timestamp
        - status
        - error
        - path

    # Schema for error response body when ASG-Services-SDK maps automatically one of its standard com.asg.services.common.exceptions into response body
    SDKError:
      type: object
      properties:
        code:
          type: string
          pattern: '^\d{3}$'
        message:
          type: string
        correlationId:
          type: string