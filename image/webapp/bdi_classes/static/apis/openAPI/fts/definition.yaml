openapi: "3.0.0"
info:
  version: 1.0.0
  title: Full Text Search
  description: Full Text Search OpenAPI definition

security:
  - BasicAuth: []
  - BearerAuth: []

servers:
  - url: '/rest'
tags:
  - name: FullTextSearch

paths:
  /fts/matching-items:
    post:
      tags:
        - FullTextSearch
      operationId: getMatchingItems
      summary: execute Full Text Search
      description: Search, among the FullTextSearch indexes (aka Solr cores), for items that fulfill the given conditions
      parameters:
        - name: expression
          in: query
          required: false
          description: |
            A set of clauses and conditions that the searched attributes of an item must satisfy to match.  
            Searched attributes are:
            * `name`: the name of the item
            * `description`: the short description of the item (aka definition)
            
            The format of the search expression itself depends on the _expressionSyntax_ parameter.  
            If empty or not provided, it means '*' (i.e. everything) and only other conditions (like tags) are considered.
          schema:
            $ref: '#/components/schemas/Expression'
        - name: expressionSyntax
          in: query
          required: false
          description: |
            How the search expression must be interpreted:
            * `EXACT`: item matches if one of its indexed attributes contains exactly the _expression_ as a subsequence (case insensitively). '?'  and '*' characters are processed for themselves, as any other regular character.
            * `WILDCARD`: item matches if one of its indexed attributes contains the _expression_ as a subsequence (case insensitively) where the '?' wildcard character may replace exactly one character for the match and '*' wilcard character may replace any number of characters. Any Space character is processed for itself, as any other regular character.  
            * `ADVANCED`: item matches if one of its indexed attributes satisfies the clauses and conditions expressed into the expression. Solr syntax is obeyed, which main guidelines are:
              * Case insensitivity.
              * '*' and '?' characters are processed as wildcards and matches respectively exactly one or a sequence of multiple characters.
              * Any Space (' ') character is processed as an OR condition.
              * Parenthesis characters ('(' and ')') are processed as grouping operators.
              * 'AND', 'OR', 'NOT' (in upper case), just as '&&', '+', '||', '!' and '-' are processed as boolean operators. 
              * ':' is used to specify a clause on a specific attribute of an item
              * '\' is the escape character so that any following character is processed for itself as a regular character.
              * '"' is the encloser escape character so that any sequence of character enclosed by two double-quotes is processed for itself.
              * '{', '}', '[', ']', '~' and '^' are special characters that are used for complex search queries. 
            * `DUAL` (default): is the combination of a search using _EXACT_ then followed by a search using _ADVANCED_.
          schema:
            $ref: '#/components/schemas/ExpressionSyntax'
        - name: tags
          in: query
          required: false
          description: |
            A set of tag names. Item matches if it is tagged with at least one of those tags. If empty or not specified, tags does not matter for matching an item.  
            If the tag name is preceded with '+' character, that tag is mandatory. The item must be tagged with that tag otherwise it will not match (no matter if any other tag matches).  
            If the tag name is preceded with '-' character, that tag is forbidden. The item cannot be tagged with that tag otherwise it will not match (no matter if any other tag matches).  
            Use '\' to escape if the tag name itself starts with '+' or '-' characters.
            
              #### Examples
              1. `[tax, declaration]` means items having either 'tax' OR 'declaration' tags (or both) 
            
              2. `[+tax, +declaration]` means items having 'tax' AND 'declaration' tags  
            
              3. `[-tax, -declaration]` means items having NOT 'tax' AND NOT 'declaration' tags  
            
              4. `[+tax, declaration, form]` means items HAVING 'tax' tag AND ('declaration' OR 'form') tags.  
              The 'tax' tag is mandatory while 'declaration' and 'form' are optional **but**, since they are listed, at least one of them must be present.  
              _To get items that just have the 'tax' tag without additional constraint, simply use `[+tax]`._  
              _As en edge case, `[+tax, declaration]` means items HAVING 'tax' tag AND ('declaration') tags; what is the same as `[+tax, +declaration]`._  
            
              5. `[-tax, declaration, form]` means items having NOT 'tax' AND ('declaration' OR 'form') tags.  
              The 'tax' tag is forbidden while 'declaration' and 'form' are optional **but**, since they are listed, at least one of them must be present.
              It allows sub-filtering items that have 'declaration' or 'form' tags by excluding those that also have the 'tax' tag.  
              _To get items that do not have the 'tax' tag without additional constraint, simply use `[-tax]`._  
              _As en edge case, `[-tax, declaration]` means items having NOT 'tax' tag AND ('declaration') tags; what is the same as `[-tax, +declaration]`._
          schema:
            $ref: '#/components/schemas/TagNames'
          style: form
          explode: true
        - name: indexIds
          in: query
          required: false
          description: |
            A set of index ids (aka Solr core names) to operate the search in.  
            To obtain information about available index identifiers, see [/fts/indexes](#/FullTextSearch/getIndexes).  
            If empty or not specified, all accessible indexes are searched for.
          schema:
            $ref: '#/components/schemas/IndexIds'
          style: form
          explode: true
        - name: offset
          in: query
          required: false
          description: |
            Offset for skipping first results.  
            Negative value is not allowed.
          schema:
            $ref: '#/components/schemas/Offset'
        - name: limit
          in: query
          required: false
          description: |
            Limits the result to the specified number of entries.  
            Negative means unlimited.  
            Zero value means zero matching items are brought back (but the response still contains valuable information like facet tree and number of matching items).  
            Null/unspecified value means value of asg.rochade.fts.limit.default parameter from the application configuration.
          schema:
            $ref: '#/components/schemas/Limit'
        - name: searchLangs
          in: query
          required: false
          description: |
            A set of languages in ISO 639-1 format (two-letter codes). If the target index supports multiple languages,
            each item is searched for a match with the search _expression_ among all the language variances of indexed attributes corresponding to that set.  
            If empty or not specified, search happens against the language indexed as default (which corresponds to the default language of the target Rochade Subject Area, if MLC, or sole language otherwise).
          schema:
            $ref: '#/components/schemas/SearchLangs'
          style: form
          explode: true
        - name: displayLangs
          in: query
          required: false
          description: |
            A set of languages in ISO 639-1 format (two-letter codes). For matching items, the response will include all the language variances of indexed attributes corresponding to that set.  
            All the languages specified in _searchLangs_ parameter, and the default indexed language, are automatically appended to this set. It is useless to repeat them.   
            The purpose of this parameter is to include into the response language-variances of indexed-attributes that are not searched for, but are neverhteless required for output.
          schema:
            $ref: '#/components/schemas/FTSDisplayLangs'
          style: form
          explode: true
      requestBody:
        description: |
          Additional parameters:  
          
          ## facets _(optional)_
          A set of facet ids. Item matches if it is associated with at least one of those facets.  
          If empty or not specified, facets does not matter for matching an item.  
          The format is a map where:
          * key: is a facet name
          * value: is a array of acceptable values for that facet.
          If an item has, at least, one facet with such name that itself has one of the provided values, then that item matches.
          
          To obtain information about available facet names and values, see [/fts/facets](#/FullTextSearch/getFacets)  

        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FTSRequestBody'
      responses:
        '200':
          description: |
            Matching items, with highlighting of the matching parts among their searched attributes (so 'name' and 'description' only).  

            For each matching item, the following BDI attributes may be provided.  
            If the attribute is not Multi-Languages-Capable (MLC), it is always provided.  
            If it is MLC, it is provided only if it has a value into the 'primary' language.
            For those MLC attributes, if the item has valid values into 'extras' requested languages or the 'default' language,
            they are provided into the _translations_ attribute.  
            * `id`: the unique identifier of the item
            * `itemCategory`: what category falls the item in. This is an abstraction for BDI UI based on the Rochade type (typeId).
            * `typeId`: the Rochade type
            * `type`: the type of the item (among the list of valid BDI types) 
            * `typeLabel`: the label of the type, provided into the 'primary' language
            * `name`: the name of the item, provided into the 'primary' language
            * `definition`: the short description of the item (aka definition), provided into the 'primary' language
            * `technology`: the technology associated with the item, provided into the 'primary' language 
            * `tags`: the tags associated with the item
            * `path`: the path of container items for the current item. For each container item in the path segments, the following BDI attributes are provided:
              * id
              * name
              * type
              * typeId
              * typeLabel
              * translations _(for the 'name' attribute only)_
            * translations: for each MLC attributes, attribute values in 'default' and 'extras' requested languages.
            * highlighting: for each language where matches happen, the attribute values highlighted (i.e., enclosed by _highlightingTokens_) at matching part(s)
            
            #### _Notes:_
              _The 'primary' language is the language requested at first position in 'displayLangs' parameter, OR if that last is empty,
              it corresponds to the preferred language of the user as provided by the user preferences item in Rochade server.  
              This is also known as the working language, or at least the most important one, for the user agent._  
            
              _The 'default' language is the default one associated with the Rochade database.  
              Translations for that language are always part of the response._  
            
              _The 'extras' languages are the languages requested in 'displayLangs' parameter after the first position, OR if that last is empty,
              they correspond to the additional preferred languages of the user as provided by the user preferences item in Rochade server.  
              They are known as additional languages for which the user agent wants the translations._
          content:
            application/vnd.bdi-services-fts-result.v1+json:
              schema:
                $ref: '#/components/schemas/FTSResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '504':
          $ref: '#/components/responses/GatewayTimeout'
        default:
          $ref: '#/components/responses/Unexpected'

  /fts/indexes:
    get:
      tags:
        - FullTextSearch
      operationId: getIndexes
      summary: Retrieve details about the existing indexes
      description: |
        List ids of all the existing indexes with their metadata like related metaApp.
      responses:
        '200':
          description: List of all available indexes
          content:
            application/vnd.bdi-services-fts-indexes.v1+json:
              schema:
                $ref: '#/components/schemas/Indexes'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /fts/search-filters:
    get:
      tags:
        - FullTextSearch
      operationId: getSearchFilters
      summary: Get all filters that user can choose on the search to get the required items.
      description: |
        Get all filters that user can choose on the search to get the required items.
      parameters:
        - name: displayLangs
          in: query
          description: |
            By convention, the first value corresponds to the primary language. It corresponds to the preferred language of the user, as provided in the user preferences item in the Rochade server.  
            It is also known as the working language, or at least the most important one, for the user agent.
            The remaining values correspond to the additional preferred languages of the user as provided by the user preferences item in the Rochade server.
            They are the additional languages for which the user agent wants the translations.
          required: false
          schema:
            $ref: '#/components/schemas/DisplayLangs'
      responses:
        '200':
          description: The list requested search filter categories.
          content:
            application/vnd.bdi-services-search-filters-response.v1+json:
              schema:
                $ref: '#/components/schemas/SearchFilterResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'



####################
components:
  securitySchemes:
    BasicAuth: # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
    BearerAuth: # <-- arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes

  responses:
    BadRequest:
      description: A bad request was submitted (HTTP 400)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Unauthorized:
      description: Unauthorized (HTTP 401)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Forbidden:
      description: You are not authorized to perform this action (HTTP 403)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    NotFound:
      description: The specified resource was not found (HTTP 404)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Conflict:
      description: A conflict occurred (HTTP 409)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    PreconditionFailed:
      description: Condition is not fulfilled (HTTP 412)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    PreconditionRequired:
      description: Condition is required (HTTP 428)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    TooManyRequests:
      description: Too many requests in a given amount of time, aka "rate limiting" (HTTP 429).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    InternalServerError:
      description: An error occurred on the server (HTTP 500)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    NotImplemented:
      description: Method not implemented (HTTP 501)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    ServiceUnavailable:
      description: Server is not ready to handle the request (HTTP 503)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    GatewayTimeout:
      description: Gateway timeout (HTTP 504)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Unexpected:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JerseyError'


  ####################
  schemas:
    # Schema for error response body when Jersey dispatcher triggers the error
    JerseyError:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        path:
          type: string
      required:
        - timestamp
        - status
        - error
        - path

    # Schema for error response body when ASG-Services-SDK maps automatically one of its standard com.asg.services.common.exceptions into response body
    SDKError:
      type: object
      properties:
        code:
          type: string
          pattern: '^\d{3}$'
        message:
          type: string
        correlationId:
          type: string

    Language:
      description: Identifier of language in ISO 639-1 format (two-letter codes)
      type: string
      pattern: '^[a-z]{2}$'

    DisplayLangs:
      type: array
      items:
        $ref: '#/components/schemas/Language'
      example:
        - en
        - fr

    ResponseLangs:
      description: The languages for which translations are available into this response.
      type: object
      properties:
        primary:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/Language'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: |
          #  This is the language requested at first position in 'displayLangs' parameter, OR if that last is empty,
          #  it corresponds to the preferred language of the user as provided by the user preferences item in Rochade server.
          #  This is also known as the working language, or at least the most important one, for the user agent.
          #allOf:
          #  - $ref: '#/components/schemas/Language'
          # SWAGGER-UI-IN-END
        default:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/Language'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: |
          #  The default language in ISO 639-1 format (two-letter codes) that is associated with the Rochade database.
          #allOf:
          #  - $ref: '#/components/schemas/Language'
          # SWAGGER-UI-IN-END
        extras:
          description: |
            They are the languages requested in _displayLangs_ parameter after the first position, OR if that last is empty,
            they correspond to the additional preferred languages of the user as provided by the user preferences item in Rochade server.  
            They are known as additional languages for which the user agent wants the translations.
          type: array
          items:
            $ref: '#/components/schemas/Language'
      example:
        primary: de
        default: en
        extras: [fr,de]

    ItemId:
      description: The unique identifier of the item
      type: integer
      format: int64
      example: 1234

    ItemCategory:
      description: What category falls the item in. This is an abstraction for BDI UI based on the type of the item into the Rochade Information Model.
      type: string
      enum: [TECHNICAL, BUSINESS, APPLICATION, INVENTORY, REPORTING]

    ItemType:
      type: string
      description: |
        The UI type of the item (mapped from the real Rochade Type, see /model/item-types).  
        It is used in the user interface to identify which icon must be displayed on an item (plus other usages like selecting the template to display).
      example: Field

    RochadeItemType:
      type: string
      description: |
        The unique identifier of the item type in Rochade.  
        For any filtering based on the _itemType_ the _typeId_ value should be used, when sending the request.  
        
        CAUTION: for the Rochade types, for which the type name itself is not enough to identify the exact type, the 'typeId' is structured.  
        
        For example, the DWR_RDB_TABLE_OR_VIEW type in Rochade can in fact designate either a table, a view, a materialized view or an alias.  
        To decide which kind is really an item of type DWR_RDB_TABLE_OR_VIEW, it is necessary to look at the value of its DWR_RDB_TABLE_OR_VIEW_TYPE attribute.  
        For such items, the 'typeId' must be structured in the following from: Rochade type + Rochade discriminator attribute + Rochade discriminator attribute value, all separated by dot ('.') character.  
        
        __Examples:__  
        * typeId="DWR_RDB_TABLE_OR_VIEW.DWR_RDB_TABLE_OR_VIEW_TYPE.table" (for a Table item)  
        * typeId="DWR_RDB_TABLE_OR_VIEW.DWR_RDB_TABLE_OR_VIEW_TYPE.view" (for a Table View item)  
        * typeId="DWR_RDB_TABLE_OR_VIEW.DWR_RDB_TABLE_OR_VIEW_TYPE.materialized_view" (for a Materialized View item)  
        * typeId="DWR_RDB_TABLE_OR_VIEW.DWR_RDB_TABLE_OR_VIEW_TYPE.alias" (for an Alias item)  

    Translations:
      description: |
        Attribute values in additional languages (other than the 'primary' one).  
        Keys are languages in ISO 639-1 format (two-letter codes).  
        Values are mapping between attribute names and their value into that language.  
        If an attribute is missing, it means that this attribute does not have any value for that item in that language.  
        A language entry will exist for each requested language, even if the item has no one attribute value into that language.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TranslatedAttributes'
      example:
        en:
          name: DemoItem
          definition: Sample text defining the item
          technology: Mainframe
        fr:
          typeLabel: Object Métier
          name: Objet de démonstration
          definition: Exemple de texte décrivant l'objet

    TranslatedAttributes:
      description: |
        Item attributes and their associated value in a contextual language.
      type: object
      properties:
        typeLabel:
          description: Label for the item type, in the contextual language
          type: string
        name:
          description: Name of item, in the contextual language
          type: string
        definition:
          description: The short description of the item (aka definition), in the contextual language
          type: string
        technology:
          description: The technology associated with the item, in the contextual language
          type: string

    HATEOASLinks:
      description: HATEOAS links
      type: array
      items:
        $ref: '#/components/schemas/HATEOASLink'

    HATEOASLink:
      description: HATEOAS link
      type: object
      properties:
        rel:
          description: the relation between the resource associated with this HATEOAS link and the resource designated by the target href
          type: string
        method:
          description: HTTP method to use when invoking href
          type: string
          enum: [ GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH ]
        href:
          description: the URL to follow to obtain the related resource
          type: string
          format: uri
      required:
        - rel
          method
          href
      example:
        rel: "self"
        method: GET
        href: /rest/searchfilters

    Path:
      description: |
        The path of container items for the current item. The item itself is **not** included into this path.  
        For each container item in the path segments, the following BDI attributes are provided:
        * id
        * name
        * type
        * typeLabel
        * translations _(but only for the 'name' and 'typeLabel' attributes, not for other attributes like 'definition')_
        * links
      type: array
      items:
        $ref: '#/components/schemas/PathSegment'

    PathSegment:
      description: |
        Segments of the path of an item
      type: object
      required:
        - id
        - typeId
        - type
        - typeLabel
        - translations
        - links
      properties:
        id:
          $ref: '#/components/schemas/ItemId'
        name:
          description: Name of item, in the 'primary' language
          type: string
        typeId:
          $ref: '#/components/schemas/RochadeItemType'
        type:
          $ref: '#/components/schemas/ItemType'
        typeLabel:
          description: Label for the item type, in the 'primary' language
          type: string
        translations:
          $ref: '#/components/schemas/PathSegmentTranslations'
        links:
          $ref: '#/components/schemas/HATEOASLinks'

    PathSegmentTranslations:
      description: |
        Name and type label in additional languages (other than the 'primary' one).  
        Keys are languages in ISO 639-1 format (two-letter codes).  
        Values are mapping between attribute names and their value into that language.  
        If an attribute is missing, it means that this attribute does not have any value for that item in that language.  
        A language entry will exist for each requested language, even if the item has no one attribute value into that language.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PathSegmentTranslatedAttributes'
      example:
        en:
          name: DemoItem
          typeLabel: Business Term
        fr:
          name: Objet de démonstration
          typeLabel: Object Métier

    PathSegmentTranslatedAttributes:
      description: |
        Name and type label in a contextual language.
      type: object
      properties:
        typeLabel:
          description: Label for the item type, in the contextual language
          type: string
        name:
          description: Name of item, in the contextual language
          type: string

    ItemBase:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ItemId'
        itemCategory:
          $ref: '#/components/schemas/ItemCategory'
        type:
          $ref: '#/components/schemas/ItemType'
        typeLabel:
          description: Label for the item type, in the 'primary' language
          type: string
          example: RBG/BUSINESS-TERM
        typeId:
          $ref: '#/components/schemas/RochadeItemType'
        name:
          description: Name of item, in the 'primary' language
          type: string
          example: Business Term - Real Estate Loans
        translations:
          $ref: '#/components/schemas/Translations'
        links:
          $ref: '#/components/schemas/HATEOASLinks'
      discriminator:
        propertyName: typeId
      required: [id, itemCategory, type, typeId, typeLabel, name, links]

    Tag:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ItemId'
        name:
          type: string
          example: CCAR
        translations:
          $ref: '#/components/schemas/Translations'
        links:
          $ref: '#/components/schemas/HATEOASLinks'

    Tags:
      description: Tags
      type: array
      items:
        $ref: '#/components/schemas/Tag'

    TagNames:
      type: array
      items:
        type: string
      example:
        - Apple
        - Banana

    SearchLangs:
      type: array
      items:
        $ref: '#/components/schemas/Language'
      example:
        - en
        - fr
        - de

    # DisplayLangs is a common schema, for FTS matching where the meaning is close but not same, we use a separate schema
    FTSDisplayLangs:
      type: array
      items:
        $ref: '#/components/schemas/Language'
      example:
        - es
        - pt

    Expression:
      type: string
      default: '*'

    ExpressionSyntax:
      type: string
      enum: [EXACT, WILDCARD, ADVANCED, DUAL]
      default: 'DUAL'

    IndexIds:
      type: array
      items:
        type: string
      example:
        - BusinessTermView
        - DWRView

    Offset:
      type: integer
      default: 0

    Limit:
      type: integer

    Facets:
      type: object
      # keys are free but values are array of strings
      additionalProperties:
        type: array
        items:
          type: string
      example:
        level1:
          - '2'
        level2:
          - '24'
          - '25'
        level3:
          - 'RM__TESTGLOSSARY_BASE'

    FTSRequestBody:
      description: requested parameters to run the Full Text Search operation
      type: object
      properties:
        facets:
          $ref: '#/components/schemas/Facets'

    MessageLevel:
      description: the level of the message
      type: string
      enum: [ERROR, WARNING, INFO]

    FTSMessage:
      description: |
        message about an event during the Full Text Search operation
      type: object
      properties:
        text:
          description: the text of the message
          type: string
        level:
          $ref: '#/components/schemas/MessageLevel'

    FTSResult:
      description: Full Text Search result
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/FTSMessage'
        numFound:
          description: How many items are matching in the absolute. All the matching are generally not returned in this result but only a subset according to the _offset_ and _limit_ parameters of the request. The size of that subset is provided by _numRetrieved_.
          type: integer
          format: int64
          default: 0
          example: 1
        numFoundExact:
          description: Indicating if the _numFound_ value is exact or an approximation. If it\'s an approximation, the real number of hits for the query is guaranteed to be greater or equal _numFound_.
          type: boolean
          default: true
        numRetrieved:
          description: How many matching items are available in _matches_. This is at maximum equals to the _limit_ parameters of the request.
          type: integer
          format: int64
          default: 0
          example: 1
        maxHits:
          description: |
            The absolute upper boundary (applied for security reason). This limit is configurable by administrators.    
            However, the total number of matching results *may be less* than this value.
            This happens when search criteria lead to filter so many items than the number of items effectively matching
            becomes less than the _maxHits_ value.  
            
            When positive, no more results than this value can be retrieved at maximum.  
            It means that, even if paging, the last page that can be obtained is governed by the _maxHits_ value.  
            In other words, matching items ordered after the _maxHits_ index can never be retrieved (no matter what you do).  
            The recommended way to retrieve items beyonf this limit is to step up the search criteria in order to refine the matching items.  
            
            Negative value or zero value means unlimited (This should be avoided to reduce risks of DOS attacks).
          type: integer
          format: int64
          example: 1000
        langs:
          $ref: '#/components/schemas/ResponseLangs'
        highlightingTokens:
          $ref: '#/components/schemas/HighlightingTokens'
        matches:
          type: array
          items:
            $ref: '#/components/schemas/MatchingItem'
        facetTrees:
          $ref: '#/components/schemas/FacetTrees'

    HighlightingTokens:
      description: The subsequences that are used to enclose the words or characters that are matching inside the attribute of an item.
      type: object
      properties:
        start:
          type: string
          default: <hilight_em>
        end:
          type: string
          default: </hilight_em>

    MatchingItem:
      description: |
        Attributes of a matching item.  
        
        If the attribute is not Multi-Languages-Capable (MLC), it is always provided (but may be null).  
        If it is MLC, it is provided only if it has a value into the 'primary' language.
        For those MLC attributes, if the item has valid values into the 'default' or 'extras' languages,
        they are provided into the _translations_ attribute.
      type: object
      required:
        - definition
        - technology
        - tags
        - path
        - translations
        - highlighting
      allOf:
        - $ref: '#/components/schemas/ItemBase'
        - type: object
          properties:
            definition:
              description: The short description of the item (aka definition), in the 'primary' language
              type: string
            technology:
              description: The technology associated with the item, in the 'primary' language
              type: string
            isInventoryOnly:
              type: boolean
              description: It indicates the item can have inventory.
            canHaveLineage:
              type: boolean
              description: It indicates the item can have Lineage diagrams.
            canHaveBusinessTraceability:
              type: boolean
              description: It indicates the item can have Business Traceability diagrams.
            linkedToBusinessItem:
              description: Indicates if the item is linked to at least one Business item.
              type: boolean
            linkedToTechnicalItem:
              description: Indicates if the item is linked to at least one Technical item.
              type: boolean
            tags:
              # SWAGGER-UI-OUT-START
              $ref: '#/components/schemas/Tags'
              # SWAGGER-UI-OUT-END
              # SWAGGER-UI-IN-START
              #description: Tags associated with the item
              #allOf:
              #  - $ref: '#/components/schemas/Tags'
              # SWAGGER-UI-IN-END
            path:
              $ref: '#/components/schemas/Path'
            highlighting:
              $ref: '#/components/schemas/Highlighting'
      example:
        id: 1234
        itemCategory: BUSINESS
        type: PII
        typeId: GDP_PERSONAL_INFORMATION
        typeLabel: Personenbezogene Information
        name: Demo Artikel
        definition: Beispieltext, der das Demo Element definiert
        technology: Großrechner
        tags:
          - id: 569412
            name: Apple
            translations:
              fr:
                name: Pomme
          - id: 863694
            name: Peer
            translations:
              fr:
                name: Poire
        path:
          -
            id: 5678
            type: Application
            typeLabel: Anwendung
            typeId: DWR_ARC_BUSINESS_APPLICATION
            translations:
              en:
                name: Personal Information Glossary
              fr:
                name: Glossaire des données personelles
          -
            id: 7721
            name: Marketing-Kontext
            type: Context
            typeLabel: Kontext
            typeId: RBG/CONTEXT
            translations:
              en:
                name: Marketing Context
              fr:
                name: Département Commercial
        translations:
          en:
            name: DemoItem
            definition: Sample text defining the item
            technology: Mainframe
          fr:
            name: Objet de démonstration
            definition: Exemple de texte décrivant l'objet
        highlighting:
          definition: Beispieltext, der das <hilight_em>Demo</hilight_em> Element definiert
          translations:
            en:
              name: <hilight_em>Demo</hilight_em><hilight_em>Item</hilight_em>
              definition: Sample text defining the <hilight_em>item</hilight_em>
            fr:
              name: Objet de <hilight_em>démo</hilight_em>nstration

    Highlighting:
      description: |
        Attributes that are matching with their highlighted values.  
        Keys are the attribute names (among the searched attributes, so 'name' and 'description' only) that are matching in the 'primary' language,
        OR the _translations_ entry.  
        Values are their highlighted value into the 'primary' language, except for the _translations_ entry that contains highlighted values
        for matching in 'default' or 'extras' languages.  
        If an attribute is missing, it means that this attribute does not match for that item in the 'primary' language.
      type: object
      properties:
        name:
          description: Name of item, with highlighted matches enclosed by _highlightingTokens_, in the 'primary' language
          type: string
        definition:
          description: The short description of the item (aka definition), with highlighted matches enclosed by _highlightingTokens_, in the 'primary' language
          type: string
        translations:
          $ref: '#/components/schemas/HighlightedTranslations'
      example:
        name: <hilight_em>Demo</hilight_em><hilight_em>Item</hilight_em>
        definition: Sample text defining the <hilight_em>item</hilight_em>
        translations:
          fr:
            name: Objet de <hilight_em>démo</hilight_em>nstration

    HighlightedTranslations:
      description: |
        Attributes _(among the searched ones, so 'name' and 'description' only)_ that are matching with their highlighted values in additional languages (other than the 'primary' one).  
        Keys are languages in ISO 639-1 format (two-letter codes).  
        Values are mapping between attribute names and their highlighted value into that language.  
        If an attribute is missing, it means that this attribute does not match in that language.  
        A language entry will exist for each requested language, even if the item has no one match into that language.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/HighlightedTranslatedAttributes'
      example:
        en:
          name: <hilight_em>Demo</hilight_em><hilight_em>Item</hilight_em>
          definition: Sample text defining the <hilight_em>item</hilight_em>
        fr:
          name: Objet de <hilight_em>démo</hilight_em>nstration

    HighlightedTranslatedAttributes:
      description: |
        Item attributes _(among the searched ones, so 'name' and 'description' only)_ and their associated highlighted value in a contextual language.
      type: object
      properties:
        name:
          description: Name of item, with highlighted matches enclosed by _highlightingTokens_, in the contextual language
          type: string
        definition:
          description: The short description of the item (aka definition), with highlighted matches enclosed by _highlightingTokens_, in the contextual language
          type: string

    FacetTreeItem:
      description: |
        Describe one level of a facet tree.  
        Each tree item contains the facet name, its matching value and the count of item matching that facet with such value.
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        count:
          type: integer
        pivot:
          type: array
          items:
            # recursive schemas are badly processed by SwaggerUI
            # see https://stackoverflow.com/questions/36866035/how-to-refer-to-enclosing-type-definition-recursively-in-openapi-swagger
            # one proposed workaround is tricking with , but it does not allow to accomplish the real purpose of recursive schema!
            # Not only Swagger-codegen does not support cycling schemas but also Swagger-UI fails regarding such definition.
            # It is a shame because openapi-generator manages them very well, so we are restrained just by Swagger-UI.
            # Solution is to define the proper recursive schema for processing by openapi-generator, and have a web filter
            # that tweak this file on the fly when Swagger-UI download this resource from server.
            # This is the purpose of SWAGGER-UI-XXX-YYYY tags. Content in between is added or removed on the fly by
            # SWAGGER-UI-OUT-START
            $ref: '#/components/schemas/FacetTreeItem'
            # SWAGGER-UI-OUT-END
            # SWAGGER-UI-IN-START
            #description: recursive point (=> FacetTreeItem)
            #type: object
            # SWAGGER-UI-IN-END
      example:
        name: level1
        value: '2'
        count: 18
        pivot:
          - name: level2
            value: '24'
            count: 12
          - name: level2
            value: '25'
            count: 6
            pivot:
              - name: level3
                value: RM__TESTGLOSSARY_BASE
                count: 45

    FacetTrees:
      description: |
        All the facet trees.  
        Each key is the pivots used in the tree.
        Each value is the array of facet items corresponding to the root(s) of this tree.
      type: object
      additionalProperties:
        type: array
        items:
          $ref: '#/components/schemas/FacetTreeItem'
      example:
        "level1,level2,level3":
          - name: level1
            value: '2'
            count: 18
            pivot:
              - name: level2
                value: '24'
                count: 12
              - name: level2
                value: '25'
                count: 6
                pivot:
                  - name: level3
                    value: RM__TESTGLOSSARY_BASE
                    count: 45

    IndexDetails:
      description: metadata about a Full Text Search index (aka Solr core)
      type: object
      properties:
        metaAppId:
          type: string
        searchAppId:
          type: string

    Indexes:
      description: |
        Keys are index ids.  
        Values are metadata about each index.
      type: object
      # keys are free but values are specific objects
      additionalProperties:
        $ref: '#/components/schemas/IndexDetails'
      example:
        BusinessTermView:
          metaAppId: mg
          searchAppId: search_mg
        DWRView:
          metaAppId: rdb
          searchAppId: search_rdb
        Models:
          metaAppId: rm
          searchAppId: ssearch_rm
        ReferenceData:
          metaAppId: ref
          searchAppId: search_ref
        DataStructure:
          metaAppId: rds
          searchAppId: search_rds
        DataIntegration:
          metaAppId: rdi
          searchAppId: search_rdi
        BusinessIntelligence:
          metaAppId: rbi
          searchAppId: search_rbi
        BigData:
          metaAppId: rbd
          searchAppId: search_rbd
        DataQualityManagement:
          metaAppId: rdq
          searchAppId: search_rdq
        Stitching:
          metaAppId: sti
          searchAppId: search_sti

    TranslatedLabel:
      description: |
        The label field value in a contextual language.
      type: object
      properties:
        label:
          description: The label value in contextual language.
          type: string
      example:
        label: "Finance"

    LabelTranslations:
      description: |
        Describes the values of the label fields in additional languages (other than the 'primary' one).  
        Keys are languages in ISO 639-1 format (two-letter codes).
        A missing language key indicates there are no translations available for the label field value in that requested language.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TranslatedLabel'
      example:
        en:
          label: "Finance"
        de:
          label: "Finanzen"

    SearchFilterItem:
      type: object
      properties:
        id:
          description: Unique identifier for the search filter item.
          type: string
        label:
          description: The search filter label.
          type: string
        translations:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/LabelTranslations'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: |
          #  The translations of the search filter label in additional languages (other than the 'primary' one).  
          #  Keys are languages in ISO 639-1 format (two-letter codes).
          #allOf:
          #  - $ref: '#/components/schemas/LabelTranslations'
          # SWAGGER-UI-IN-END
          description: |
            The translations of the search filter label in additional languages (other than the 'primary' one).  
            Keys are languages in ISO 639-1 format (two-letter codes).
          nullable: true
        children:
          description: The list of sub categories available under the search filter item.
          type: array
          items:
            # SWAGGER-UI-OUT-START
            $ref: '#/components/schemas/SearchFilterItem'
            # SWAGGER-UI-OUT-END
            # SWAGGER-UI-IN-START
            #type: object
            # SWAGGER-UI-IN-END
      required:
        - id
          label
      example:
        id: "1"
        label: "Finance"
        translations:
          - en:
              label: "Finance"
            de:
              label: "Finanzen"
        children:
          - id: 2
            label: "Accounts"
            translations:
              - en:
                  label: "Accounts"
                de:
                  label: "Konten"

    MLAttributes:
      description: |
        Attribute values for a specific language variance.  
        Keys are attribute names.  
        Values are attribute value in the contextual language.  

        Values of each attribute can be:
        * numeric (e.g. for id),
        * text (e.g. for definition),
        * instants represented in ISO 8601 format (e.g. for history aspects),
        * arrays of text (e.g. for tags),
        * arrays of object (e.g. for a link attribute)  

        Depending on the language, not all but only some attributes are present. If absent it means the item has no value in the contextual language for that attribute.
      type: object

    SearchFilterResponse:
      description: |
        Describes the list of search filters available to the user, to refine the results to be displayed when performing a search.
      type: object
      properties:
        langs:
          $ref: '#/components/schemas/ResponseLangs'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/SearchFilterItem'
        technicalItems:
          type: array
          items:
            $ref: '#/components/schemas/SearchFilterItem'
        businessItems:
          type: array
          items:
            $ref: '#/components/schemas/SearchFilterItem'
        applications:
          type: array
          items:
            $ref: '#/components/schemas/SearchFilterItem'
        reports:
          type: array
          items:
            $ref: '#/components/schemas/SearchFilterItem'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/SearchFilterItem'
        markers:
          type: array
          items:
            $ref: '#/components/schemas/SearchFilterItem'
        links:
          $ref: '#/components/schemas/HATEOASLinks'
      required:
        - langs
        - groups
        - technicalItems
        - businessItems
        - applications
        - reports
        - tags
        - markers
        - links
      example:
        langs:
          primary: de
          default: en
          extras: [ fr,de ]
        groups:
          - id: "1"
            label: "Finance"
            translations:
              - en:
                  label: "Finance"
                de:
                  label: "Finanzen"
            children:
              - id: "2"
                label: "Accounts"
                translations:
                  - en:
                      label: "Accounts"
                    de:
                      label: "Konten"
              - id: "3"
                label: "Banking"
          - id: "4"
            label: "Marketing"
            children:
              - id: "5"
                label: "Digital Marketing"
              - id: "6"
                label: "Content marketing"
        technicalItems:
          - id: "15"
            label: "Applications"
          - id: "21"
            label: "Databases"
        businessItems:
          - id: "221"
            label: "Policies"
          - id: "223"
            label: "Standards"
        applications:
          - id: "43"
            label: "Customer Loyalty Program"
          - id: "46"
            label: "Customer Relation Management"
        tags:
          - id: "331"
            label: "GDPR"
          - id: "332"
            label: "Tag A"
        markers:
          - id: 441
            label: "CDE"
          - id: 442
            label: "PII"
