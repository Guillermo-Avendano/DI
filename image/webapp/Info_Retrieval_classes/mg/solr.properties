##
# Copyright (c) 1983-2023 Rocket Software, Inc. or its affiliates. All Rights Reserved.                                    
#
# Version 10.01.001
#
# Property file for SOLR settings
##

#######################################################
#########  Solr Connection settings  ##################
#######################################################

#########################
# URL to the Solr server (if the solr index should be used by the search).
# If the value is empty the Rochade search function is used.
#########################  
httpSolrServer=http\://wins2019s\:8181/solr/

#########################
# Active Index Search Applications 
# Defines which index search application are active (and so can be searched within).
# Valid values are the ones that appear in the "app_id" index field.
# Current apps : search_mg search_rdb search_rm search_ref search_rds search_rdi search_rbi search_rbd search_rdq search_sti
#########################
index.applications=search_mg
core=BusinessTermView

#########################
# Maps the Search Applications to their respective Solr core.
#########################
search_mg.core=BusinessTermView
search_rdb.core=DWRView
search_rm.core=Models
search_ref.core=ReferenceData
search_rds.core=DataStructure
search_rdi.core=DataIntegration
search_rbi.core=BusinessIntelligence
search_rbd.core=BigData
search_rdq.core=DataQualityManagement
search_sti.core=Stitching
	
##########################
# Force backward compatibility with Rochade Browser Integrated Search 8.80 and below
# If set to 'true' the name of the Solr fields will be generated in the same way
# than SearchApps 8.80 and below
# (what is <SolrFieldName>=<RochadeFieldName><ISO_lang_code>).
#
# Do NOT set to 'true' except if you connect to a Solr server indexed with legacy mode
# so a Solr instance fulfilled by:
# - either Indexing Tool up to 8.80
# - or by Indexing Tool after 8.80 with 'legacyIndexing' option set to 'true' too.
##########################
legacyIndexing=false


#########################################################################################################################
#########  Solr Query settings - Default values (most settings can be customized by user preferences)  ##################
#########################################################################################################################

#########################
## Query Fields
## List of Solr fields (separated by comma) and the "boosts" to associate with each of them when building DisjunctionMaxQueries from the user's query. .
## Languages suffix will be associated with each of list item according to selected language (i.e NAMEde)
## Format: fieldOne^2.3,fieldTwo,fieldThree^0.4 - indicates that fieldOne has a boost of 2.3, fieldTwo has the default boost, and fieldThree has a boost of 0.4.
## This indicates that matches in fieldOne are much more significant than matches in fieldTwo, which are more significant than matches in fieldThree.
qf=NAME^10,DEFINITION^2,ACRONYMS

#########################
## All Solr Query Fields that could be shown in a search result in MetaGlossary application
displayFields=DEFINITION,RBG/DESIGNATION,ACRONYMS,RBG/STATUS

#########################
# Defines the fields to sort by (but only used to decide between of same matching score).
# Take care that the main decision-maker for sorting is the matching score which is governed by the boosting of Query Fields (qf).
# The boosting is managed:
# - first into the search preferences (MTB_PREFERENCE items)
# - or secondly, as a backup, default initial values are managed into the indexing rules files (SolrInser_xxx.xml).
#
# Default Value: NAME asc,DEFINITION asc
#
#########################
sort=NAME asc,DEFINITION asc

#########################
## Maximum number of items that can be returned by a query
## Specifying 0 removes the restriction
hl.fragsize=1000

#########################
##Enables facet counts in the query response. Any blank or missing value, or "false" will disable faceting. 
##None of the other parameters listed below will have any effect without setting this param to "true"
facet=true

#########################
##A list of fields to pivot. Multiple values will create multiple sections in the response
facet.pivot=level1,level2,level3

#########################
## Defines the (writer type) parameter is used by Solr to determine which QueryResponseWriter should be used to process the request
## Default Value: xml
wt=xml

#########################
## Defines the size, in characters, of the snippets (aka fragments) created by the highlighter
## Default Value ML env: id,DEFINITIONen,ACRONYMSde,NAMEde,DEFINITIONde,ACRONYMSen,NAMEen
## Default Value nonML env: id,DEFINITION,ACRONYMS,NAME
## hl.fl=

#########################
## Defines the text which appears before a highlighted term when using the simple formatter
## Default Value : <hilight_em>
#hl.simple.pre=

#########################
## Defines the text which appears after a highlighted term
## Default Value : </hilight_em>
#hl.simple.post=

#########################
## Defines the query parser type 
## Default Value : edismax
#defType=

#########################
## Defines autocomplete requestHandler names you have in solrconfig.xml/configoverlay.json separated by comma
## If the first request handler response suites for our purpose, the next chain of handlers will not be executed
## If empty then autocomplete is disabled
autocomplete=suggest_phrase,autosuggest
#########################
## Defines additional parameters to this requestHandler
## They will be added to the query while defined below request handler name execution
## (i.e "autosuggest" you have in "autocomplete" property)
######## Use external parameters to control solr suggestion #################
######## Collation:
## collation=true  -  to get only collation items from response(used in InfoRetrieval to check whether return only collations )
## spellcheck.maxCollations=5  - maximum number of collations to return. Default=1. Ignored if "spellcheck.collate" is false.
## spellcheck.collate=true - required if you did't define it in solrconfig
######## Control output:
## spellcheck.count=7  - maximum number of suggestions to return
## Note that this value also limits the number of candidates considered as suggestions.
## You might need to increase this value to make sure you always get the best suggestion, even if you plan to only use the first item in the list.
##################################
## Example: autosuggest=spellcheck.count=8&collation=true&spellcheck.maxCollations=8
autosuggest=collation\=true&spellcheck.maxCollations\=7

######################################################################
# Advanced Solr settings - Do NOT modify except if advised to do so! #
######################################################################

#########################
# Fields for dynamic filtering
# Specify field names that will be used to filter the query.
# Conditions on the fields listed here will be generated dynamically to restrict the super set of documents that can be returned, without influencing score.
# Format: List of SOLR field types separated by comma
# 
# Take care that this setting is NOT the direct value of the fq parameter (http://wiki.apache.org/solr/CommonQueryParameters#fq)
# that is given at runtime to the Solr server (which one must be in the form 'field_xxx:(condition_clause)')!
# This setting only lists the fields that must be used to extend dynamically the Solr fq clauses. It is not directly the 'fq' clause itself!
# The restricting values to build the fq clauses are provided at runtime by the web client via an URL query parameter having the same name!
# (example: MyInfoAssist provides the restriction about Glossaries to search in via an URL query parameter named 'GLOSSARYID').
# 
# ATTENTION: This setting should stay UNTOUCHED except if one is developing its own web client (other than GlobalSearch and MyInfoAssist)!!!
#
#########################
fieldsForDynamicFiltering=GLOSSARYID,roles,visibility.filter

#########################
# Setting for the 'dualSearch' search mode to decide if exact matches must always be queried or not. ##
#
# If the active search mode is 'dualSearch', then this flag decides if:
# - either, when flag is 'true', the exact match query must be skipped (because we consider that running
# 	exact match query on a 'very simple' pattern is useless and same results will in fact normally
# 	be brought back by the wildcard match with same pattern. This last assertion is nevertheless very hard to prove!
# 	It is why this flag exists. If we were certain, this flag would be always 'true', that's all.)
# - or, when flag is 'false', the exact match query is always executed first (no matter of the pattern).
# 
# For other search modes this flag has no effect.
#
# A very simple pattern means a pattern:
# - compound of only one single token
# - and containing only letter or digit characters (see {@link Character#isLetterOrDigit(char)})
#
# Default value is 'false'
#
#########################
dualSearchMode.exactMatch.skipSimplePatterns=false

#########################
# Setting for the 'dualSearch' search mode to decide when the wildcard match results become useless because we have already retrieved enough results from the exact match query. ##
#
# This value applies only when running {@link SearchMode#DUAL_SEARCH} search mode.
# It defines when we skip the second part (i.e. wildcard match) of the search operations.
# In other words, when the first part (i.e. exact match) of the search operations brings back more than
# that number of results, we consider that it is enough and it would be too costly to run also the wildcard match
# to bring back extra results.
# A value of 0 (or negative) means no limit. However it could be very costly to run the wildcard match
# if the exact match brings back a huge number of results (>10000). It might even get down the Solr server.
# A value above 2000 is really not recommended.
#
# Note: that limit applies by each Solr core independently! It means that
# if, for Solr Core A, the exact match brings back more results than this limit,
# the wildcard match will not be run for Core A, but if, at the same time, for Solr Core B,
# the exact match brings back less results than this limit, the wildcard match will be executed nevertheless for Core B.
#
# Default value is '2000'
#
#########################
dualSearchMode.wildcardMatch.skipOnceRetrievedEnoughExactMatches=2000

#########################
# Setting for backward compatibility with legacy Indexing Tool and IndexSearch AutoUpdate service.
#
# When this setting is set to 'true', the visibilityFiltering aspect relies on indexed roles
# (as they are indexed by legacy Indexing Tool and IndexSearch AutoUpdate service).
# When the new indexing application is used (IndexUpdateService) to index data, this flag can be kept to 'false'
# because the visibilityFiltering aspect does not rely on indexed roles but on other indexed data.
# 
# Default value is 'false'
# Setting is optional (default value will apply if missing)
#########################
visibility.filter.basedOnIndexedRoles=false
