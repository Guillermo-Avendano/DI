openapi: "3.0.0"
info:
  version: 1.0.0
  title: Lineages
  description: Lineages OpenAPI definition

security:
  - http: []

servers:
  - url: '/rest'
tags:
  - name: Lineages
  - name: Graphics

paths:
  /lineages/names:
    get:
      tags:
        - Lineages
      operationId: getLineageNames
      summary: Get the names of supported lineages
      description: |
      responses:
        '200':
          description: List of lineage names
          content:
            application/vnd.raas-services-lineages-names.v1+json:
              schema:
                type: array
                items:
                  description: lineage name
                  type: string
                example: [backward_detail, backward_high, endToEnd_detail, endToEnd_high, forward_detail, forward_high]
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /lineages/{lineageName}/data:
    get:
      tags:
        - Lineages
      operationId: getLineageData
      summary: Get the lineage data for some items
      description: | 
        Retrieve the data structure representing the lineage for the provided items.  
        For retrieving a visual representation of those data, laid out as a graph, see [/lineages/{lineageName}/graph](#Lineages/getLineageGraph).
      parameters:
        - $ref: '#/components/parameters/lineageName'
        - $ref: '#/components/parameters/itemIds'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/depth'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/lineageWhat'
      responses:
        '200':
          description: |
            Data representing the lineage.  
            
            The output format is governed by the _Accept_ header:
            * __application/vnd.raas-services-lineages-data.v1+json:__ - for nodes and edges representing the graph of lineage relations.
            * __application/vnd.openxmlformats-officedocument.spreadsheetml.sheet__ - for representation of lineage relations in a spreadsheet.
            * __application/vnd.raas-services-resultset.v1+json__ - for representation of lineage relations in a ResultSet.
            
            If not specified, default is nodes and edges data (_application/vnd.raas-services-lineages-data.v1+json_).
          content:
            application/vnd.raas-services-lineages-data.v1+json:
              schema:
                $ref: '#/components/schemas/LineageGraphData'
              examples:
                lineageGraphData:
                  $ref: '#/components/examples/lineageGraphData'
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                # correct but creates a mess with examples, see explanation below
                #type: string
                #format: binary
                type: object
                # CAUTION: again Swagger-UI bug/limitation. Since it contains 'XML' substring, image/svg+xml content type
                # is processed as being XML and not as being SVG as it should (see Swagger-UI source code at 
                # https://github.com/swagger-api/swagger-ui/blob/master/src/core/components/response-body.jsx
                # as referenced in https://github.com/swagger-api/swagger-ui/issues/5261).
                # So Swagger-UI enforces the example widget to contain XML and then expect a schema defining
                # the object structure. By doing this it also prevents to load any inline example using the 'value' attribute
                # (that works well for text/hmtl or incorrect image/svg MIME type but not for image/svg+xml).
                # Swagger-UI fill up the example with XML prolog then the <!-- XML example cannot be generated; root element name is undefined --> error.
                # See https://github.com/swagger-api/swagger-editor/issues/2136 and https://github.com/swagger-api/swagger-ui/issues/4650
                # (while it concerns arrays what is not our case here but at end our issue is similar).
                # A trick to work around that is to define the type as 'object (in place of 'string' with 'format: binary')
                # AND to define a root XML using 'xml' attribute (see https://swagger.io/specification/#xml-object)
                # AND defining that root element as being 'xml'. This disables the code trying to generate xml from the schema (that we do not have),
                # and to the 'value' attribute is taken as text to display. If not defining it as 'xml', we see the ugly
                # <!-- XML example cannot be generated; root element name is undefined --> text as example.
                xml:
                  name: xml
              examples:
                lineageXLS:
                  $ref: '#/components/examples/lineageXLS'
            application/vnd.raas-services-resultset.v1+json:
              schema:
                $ref: '#/components/schemas/ResultSet'
              examples:
                lineageResultSet:
                  $ref: '#/components/examples/lineageResultSet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /lineages/{lineageName}/graph:
    get:
      tags:
        - Lineages
      operationId: getLineageGraph
      summary: Get the lineage graph for some items
      description: | 
        Retrieve a visual representation, laid out as a graph, of the lineage for the provided items.  
        For pure data structure of the lineage, see [/lineages/{lineageName}/data](#Lineages/getLineageData). 
      parameters:
        - $ref: '#/components/parameters/lineageName'
        - $ref: '#/components/parameters/itemIds'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/depth'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/arrows'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/diagram'
        - $ref: '#/components/parameters/projection'
        - $ref: '#/components/parameters/nodeLimit'
        - $ref: '#/components/parameters/height'
        - $ref: '#/components/parameters/width'
        - $ref: '#/components/parameters/zoom'
        - $ref: '#/components/parameters/showType'
        - $ref: '#/components/parameters/showAttr'
        - $ref: '#/components/parameters/showInfo'
        - $ref: '#/components/parameters/showInfoLength'
        - $ref: '#/components/parameters/showMetrics'
        - $ref: '#/components/parameters/legend'
        - $ref: '#/components/parameters/showSelected'
        - $ref: '#/components/parameters/userRanking'
        - $ref: '#/components/parameters/graphRankDir'
        - $ref: '#/components/parameters/graphMargin'
        - $ref: '#/components/parameters/graphNodeSep'
        - $ref: '#/components/parameters/graphBgColor'
        - $ref: '#/components/parameters/nodeFontSize'
        - $ref: '#/components/parameters/nodeFontName'
        - $ref: '#/components/parameters/nodeFontColor'
        - $ref: '#/components/parameters/nodeColor'
        - $ref: '#/components/parameters/nodeShape'
        - $ref: '#/components/parameters/nodeStyle'
        - $ref: '#/components/parameters/nodeFillColor'
        - $ref: '#/components/parameters/nodeFixedSize'
        - $ref: '#/components/parameters/edgeFontSize'
        - $ref: '#/components/parameters/edgeFontName'
        - $ref: '#/components/parameters/edgeFontColor'
        - $ref: '#/components/parameters/edgeColor'
        - $ref: '#/components/parameters/dwhRootNodes'
        - $ref: '#/components/parameters/dwhCriticalNodes'
        - $ref: '#/components/parameters/dwhHighlightNodes'
        - $ref: '#/components/parameters/dwhHighlightEdges'
        - $ref: '#/components/parameters/dwhVirtualNodes'
        - $ref: '#/components/parameters/dwhVirtualEdges'
        - $ref: '#/components/parameters/dwhDiamond'
        - $ref: '#/components/parameters/dwhTag'
        - $ref: '#/components/parameters/ieStretch'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/language'
        - $ref: '#/components/parameters/hideType'
        - $ref: '#/components/parameters/hideName'
        - $ref: '#/components/parameters/hideTypes'
        - $ref: '#/components/parameters/selectMode'
        - $ref: '#/components/parameters/selectType'
        - $ref: '#/components/parameters/selectName'
      responses:
        '200':
          description: |
            Graph representation of the lineage.  
            
            The output format is governed by the _Accept_ header:
            * __image/svg+xml__ - for SVG format
            * __image/png__ - for PNG format
            * __image/jpeg__ - for JPEG format
            * __image/gif__ - for GIF format
            * __text/plain; content=dot__ - for Graphviz's dot textual format
            * __text/plain; content=cmap__ - for CMapTools textual format
            
            If not specified, default is SVG (_image/svg+xml_).
          # Tech note: As specified by section 5.1 of RFC2045 (https://www.rfc-editor.org/rfc/rfc2045#page-12), a MIME type may have multiple parameters.
          # It means charset parameter can still be added to 'text/plain; content=dot' to produce a valid Response Content Type being 'text/plain; content=dot; charset=UTF-8'.
          # See https://www.oreilly.com/library/view/http-the-definitive/1565925092/apds02.html for advanced multipart.
          content:
            image/svg+xml:
              schema:
                type: object
                # CAUTION: again Swagger-UI bug/limitation. Since it contains 'XML' substring, image/svg+xml content type
                # is processed as being XML and not as being SVG as it should (see Swagger-UI source code at 
                # https://github.com/swagger-api/swagger-ui/blob/master/src/core/components/response-body.jsx
                # as referenced in https://github.com/swagger-api/swagger-ui/issues/5261).
                # So Swagger-UI enforces the example widget to contain XML and then expect a schema defining
                # the object structure. By doing this it also prevents to load any inline example using the 'value' attribute
                # (that works well for text/hmtl or incorrect image/svg MIME type but not for image/svg+xml).
                # Swagger-UI fill up the example with XML prolog then the <!-- XML example cannot be generated; root element name is undefined --> error.
                # See https://github.com/swagger-api/swagger-editor/issues/2136 and https://github.com/swagger-api/swagger-ui/issues/4650
                # (while it concerns arrays what is not our case here but at end our issue is similar).
                # A trick to work around that is to define a root XML using 'xml' attribute (see https://swagger.io/specification/#xml-object)
                # AND defining that root element as being 'svg'. If not defining it as 'svg', when loading an example value,
                # Swagger-UI escapes the content of the example value and the final widget content is a mess.
                xml:
                  name: svg
                  #wrapped: false
              examples:
                lineageSVG:
                  $ref: '#/components/examples/lineageSVG'
            image/png:
              schema:
                type: string
                format: binary
              examples:
                lineagePNG:
                  $ref: '#/components/examples/lineagePNG'
            image/jpeg:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            text/plain; content=dot: # Graphviz dot text format has not its own MIME type registered near IANA
              schema:
                type: string
              examples:
                lineageDot:
                  $ref: '#/components/examples/lineageDot'
            text/plain; content=cmap: # CMapTools text format has not its own MIME type registered near IANA
              schema:
                type: string
              examples:
                lineageCMap:
                  $ref: '#/components/examples/lineageCMap'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'
  
  /lineages/{lineageName}/b3:
    post:
      tags:
        - Lineages
      operationId: importB3LineageData
      summary: On-demand lineage from becubic
      description: |
        Among the specified items, for those that are tied to becubic, extract lineage data from becubic and import them into Rochade (on-demand lineage).  
        
        A Rochade item is tied to becubic if becubic coupling is configured and enabled in Rochade (by items of type B3_LINEAGE_SETTINGS in Control Subject Area),
        and the item has a B3_ORIGIN attribute (which value starts with 'b3|' and continues with the becubic origin identifier).
      parameters:
        - $ref: '#/components/parameters/lineageName'
        - $ref: '#/components/parameters/b3CoupledItemIds'
        - $ref: '#/components/parameters/b3OriginIds'
      responses:
        '204':
          description: |
            Successful operation.  
            No content is returned but becubic lineage data are succesfully imported into Rochade for the specified items that are tied to becubic.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /lineage/routes:
    get:
      tags:
        - Lineages
      operationId: getLineageRoutes
      summary: List existing lineage routes
      description: |
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/lineageRouteWhat'
      responses:
        '200':
          description: Definitions of lineage routes.
          content:
            application/vnd.raas-services-resultset.v1+json:
              schema:
                $ref: '#/components/schemas/ResultSet'
              examples:
                lineageRouteResultSet:
                  $ref: '#/components/examples/lineageRouteResultSet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'
    post:
      tags:
        - Lineages
      operationId: createLineageRoute
      summary: Create a new lineage route
      description: |
      parameters:
        - $ref: '#/components/parameters/lineageNewRouteName'
        # the following parameters are defined in legacy RaaS, but probably they are non-sense
        #- $ref: '#/components/parameters/filter'
        #- $ref: '#/components/parameters/depth'
        #- $ref: '#/components/parameters/limit'
      requestBody:
        description: |
          Collection of waypoints, ordered in forward direction from start to destination.  
          Each waypoint is defined by providing identifier of an item.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LineageRouteWaypoints'
            examples:
              lineageRouteWaypoints:
                $ref: '#/components/examples/lineageRouteWaypoints'              
      responses:
        '201':
          description: |
            Identifier of the created item.
          content:
            text/plain:
              schema:
                type: integer
                format: int64
          headers:
            Location:
              description: URL of the created lineage route
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'
  
  /lineage/routes/{name}:
    get:
      tags:
        - Lineages
      operationId: getLineageRoute
      summary: Get definition of a lineage route
      description: |
      parameters:
        - $ref: '#/components/parameters/lineageRouteName'
        - $ref: '#/components/parameters/lineageRouteWhat'
      responses:
        '200':
          description: Definition of the target lineage route.
          content:
            application/vnd.raas-services-resultset.v1+json:
              schema:
                $ref: '#/components/schemas/ResultSet'
              examples:
                lineageRouteResultSet:
                  $ref: '#/components/examples/lineageRouteResultSet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'
  
  /graphics/formats:
    get:
      tags:
        - Graphics
      operationId: getGraphicsFormats
      summary: List all supported output formats
      description: |
      responses:
        '200':
          description: List of output formats
          content:
            application/vnd.raas-services-graphics-formats.v1+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GraphicFormat'
              examples:
                graphicsFormats:
                  $ref: '#/components/examples/graphicsFormats'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /graphics/graph:
    get:
      tags:
        - Graphics
      operationId: getGraph
      summary: Generate graph of provided relations between items
      description: | 
        Retrieve a visual representation, laid out as a graph, of the provided relations between items.  
        'Relations' are specified by providing transformation items among the given items. 
      parameters:
        - $ref: '#/components/parameters/itemIds'
        - name: evaluateContext
          in: query
          required: false
          description: Evaluate context of the provided items. TODO_DOCUMENT (what does it mean)
          schema:
            type: boolean
            default: true
        - $ref: '#/components/parameters/depth'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/arrows'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/diagram'
        - $ref: '#/components/parameters/projection'
        - $ref: '#/components/parameters/nodeLimit'
        - $ref: '#/components/parameters/height'
        - $ref: '#/components/parameters/width'
        - $ref: '#/components/parameters/zoom'
        - $ref: '#/components/parameters/showType'
        - $ref: '#/components/parameters/showAttr'
        - $ref: '#/components/parameters/showInfo'
        - $ref: '#/components/parameters/showInfoLength'
        - $ref: '#/components/parameters/showMetrics'
        - $ref: '#/components/parameters/legend'
        - $ref: '#/components/parameters/showSelected'
        - $ref: '#/components/parameters/userRanking'
        - $ref: '#/components/parameters/graphRankDir'
        - $ref: '#/components/parameters/graphMargin'
        - $ref: '#/components/parameters/graphNodeSep'
        - $ref: '#/components/parameters/graphBgColor'
        - $ref: '#/components/parameters/nodeFontSize'
        - $ref: '#/components/parameters/nodeFontName'
        - $ref: '#/components/parameters/nodeFontColor'
        - $ref: '#/components/parameters/nodeColor'
        - $ref: '#/components/parameters/nodeShape'
        - $ref: '#/components/parameters/nodeStyle'
        - $ref: '#/components/parameters/nodeFillColor'
        - $ref: '#/components/parameters/nodeFixedSize'
        - $ref: '#/components/parameters/edgeFontSize'
        - $ref: '#/components/parameters/edgeFontName'
        - $ref: '#/components/parameters/edgeFontColor'
        - $ref: '#/components/parameters/edgeColor'
        - $ref: '#/components/parameters/dwhRootNodes'
        - $ref: '#/components/parameters/dwhCriticalNodes'
        - $ref: '#/components/parameters/dwhHighlightNodes'
        - $ref: '#/components/parameters/dwhHighlightEdges'
        - $ref: '#/components/parameters/dwhVirtualNodes'
        - $ref: '#/components/parameters/dwhVirtualEdges'
        - $ref: '#/components/parameters/dwhDiamond'
        - $ref: '#/components/parameters/dwhTag'
        - $ref: '#/components/parameters/ieStretch'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/language'
        - $ref: '#/components/parameters/hideType'
        - $ref: '#/components/parameters/hideName'
        - $ref: '#/components/parameters/hideTypes'
        - $ref: '#/components/parameters/selectMode'
        - $ref: '#/components/parameters/selectType'
        - $ref: '#/components/parameters/selectName'
      responses:
        '200':
          description: |
            Graph representation of the lineage.  
            
            The output format is governed by the _Accept_ header:
            * __image/svg+xml__ - for SVG format
            * __image/png__ - for PNG format
            * __image/jpeg__ - for JPEG format
            * __image/gif__ - for GIF format
            * __text/plain; content=dot__ - for Graphviz's dot textual format
            * __text/plain; content=cmap__ - for CMapTools textual format
            
            If not specified, default is SVG (_image/svg+xml_).
          # Tech note: As specified by section 5.1 of RFC2045 (https://www.rfc-editor.org/rfc/rfc2045#page-12), a MIME type may have multiple parameters.
          # It means charset parameter can still be added to 'text/plain; content=dot' to produce a valid Response Content Type being 'text/plain; content=dot; charset=UTF-8'.
          # See https://www.oreilly.com/library/view/http-the-definitive/1565925092/apds02.html for advanced multipart.
          content:
            image/svg+xml:
              schema:
                type: object
                # CAUTION: again Swagger-UI bug/limitation. Since it contains 'XML' substring, image/svg+xml content type
                # is processed as being XML and not as being SVG as it should (see Swagger-UI source code at 
                # https://github.com/swagger-api/swagger-ui/blob/master/src/core/components/response-body.jsx
                # as referenced in https://github.com/swagger-api/swagger-ui/issues/5261).
                # So Swagger-UI enforces the example widget to contain XML and then expect a schema defining
                # the object structure. By doing this it also prevents to load any inline example using the 'value' attribute
                # (that works well for text/hmtl or incorrect image/svg MIME type but not for image/svg+xml).
                # Swagger-UI fill up the example with XML prolog then the <!-- XML example cannot be generated; root element name is undefined --> error.
                # See https://github.com/swagger-api/swagger-editor/issues/2136 and https://github.com/swagger-api/swagger-ui/issues/4650
                # (while it concerns arrays what is not our case here but at end our issue is similar).
                # A trick to work around that is to define a root XML using 'xml' attribute (see https://swagger.io/specification/#xml-object)
                # AND defining that root element as being 'svg'. If not defining it as 'svg', when loading an example value,
                # Swagger-UI escapes the content of the example value and the final widget content is a mess.
                xml:
                  name: svg
                  #wrapped: false
              examples:
                lineageSVG:
                  $ref: '#/components/examples/lineageSVG'
            image/png:
              schema:
                type: string
                format: binary
              examples:
                lineagePNG:
                  $ref: '#/components/examples/lineagePNG'
            image/jpeg:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            text/plain; content=dot: # Graphviz dot text format has not its own MIME type registered near IANA
              schema:
                type: string
              examples:
                lineageDot:
                  $ref: '#/components/examples/lineageDot'
            text/plain; content=cmap: # CMapTools text format has not its own MIME type registered near IANA
              schema:
                type: string
              examples:
                lineageCMap:
                  $ref: '#/components/examples/lineageCMap'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /graphics/graph/dot:
    post:
      tags:
        - Graphics
      operationId: getGraphDot
      summary: Generate graph from a Graphiv's Dot file
      description: | 
        Retrieve a visual representation of the provided graph described using Graphiv's Dot format.
      parameters:
        - $ref: '#/components/parameters/zoom'
      requestBody:
        description: The graph description in Graphiv's Dot format.
        required: true
        content:
          text/plain; content=dot:
            schema:
              type: string
            examples:
              lineageDot:
                $ref: '#/components/examples/lineageDot'
      responses:
        '200':
          description: |
            Graph representation of the lineage.  
            
            The output format is governed by the _Accept_ header:
            * __image/svg+xml__ - for SVG format
            * __image/png__ - for PNG format
            * __image/jpeg__ - for JPEG format
            * __image/gif__ - for GIF format
            
            If not specified, default is SVG (_image/svg+xml_).
          # Tech note: As specified by section 5.1 of RFC2045 (https://www.rfc-editor.org/rfc/rfc2045#page-12), a MIME type may have multiple parameters.
          # It means charset parameter can still be added to 'text/plain; content=dot' to produce a valid Response Content Type being 'text/plain; content=dot; charset=UTF-8'.
          # See https://www.oreilly.com/library/view/http-the-definitive/1565925092/apds02.html for advanced multipart.
          content:
            image/svg+xml:
              schema:
                type: object
                # CAUTION: again Swagger-UI bug/limitation. Since it contains 'XML' substring, image/svg+xml content type
                # is processed as being XML and not as being SVG as it should (see Swagger-UI source code at 
                # https://github.com/swagger-api/swagger-ui/blob/master/src/core/components/response-body.jsx
                # as referenced in https://github.com/swagger-api/swagger-ui/issues/5261).
                # So Swagger-UI enforces the example widget to contain XML and then expect a schema defining
                # the object structure. By doing this it also prevents to load any inline example using the 'value' attribute
                # (that works well for text/hmtl or incorrect image/svg MIME type but not for image/svg+xml).
                # Swagger-UI fill up the example with XML prolog then the <!-- XML example cannot be generated; root element name is undefined --> error.
                # See https://github.com/swagger-api/swagger-editor/issues/2136 and https://github.com/swagger-api/swagger-ui/issues/4650
                # (while it concerns arrays what is not our case here but at end our issue is similar).
                # A trick to work around that is to define a root XML using 'xml' attribute (see https://swagger.io/specification/#xml-object)
                # AND defining that root element as being 'svg'. If not defining it as 'svg', when loading an example value,
                # Swagger-UI escapes the content of the example value and the final widget content is a mess.
                xml:
                  name: svg
                  #wrapped: false
              examples:
                lineageSVG:
                  $ref: '#/components/examples/lineageSVG'
            image/png:
              schema:
                type: string
                format: binary
              examples:
                lineagePNG:
                  $ref: '#/components/examples/lineagePNG'
            image/jpeg:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'


components:
####################
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  
  parameters:
    lineageName:
      name: lineageName
      in: path
      required: true
      description: |
        A valid lineage name, as retrieved from [/lineages/names](#Lineages/getLineageNames)
      schema:
        type: string
    lineageRouteName:
      name: name
      in: path
      required: true
      description: |
        A valid lineage route name, as retrieved from [/lineages/routes](#Lineages/getLineageRoutes)
      schema:
        type: string
    lineageNewRouteName:
      name: name
      in: path
      required: true
      description: |
        A valid lineage route name.
      schema:
        type: string
    itemIds:
      name: itemIds
      in: query
      required: true
      description: |
        One or more item ids for which the lineage must be computed.  
        It cannot be empty or unspecified.
      schema:
        type: array
        items:
          description: Item id
          type: integer
          format: int64
        example: [8685, 12749]
      style: form
      explode: true
    b3CoupledItemIds:
      name: itemIds
      in: query
      required: false
      description: |
        One or more item ids. For those that are coupled to becubic, the lineage in becubic will be computed and imported into Rochade.    
        Either this parameter or the _b3OriginIds_ one, or both, must be specified but they cannot be empty or unspecified at the same time.  
        If both are specified, they are combined together (b3 origin ids being first extracted from specified Rochade items having a B3_ORIGIN attribute)
      schema:
        type: array
        items:
          description: Rochade item id
          type: integer
          format: int64
        example: [16548, 4993]
      style: form
      explode: true
    b3OriginIds:
      name: b3OriginIds
      in: query
      required: false
      description: |
        One or more becubic origin ids (i.e. the internal identifiers that are stored into B3_ORIGIN attribute of Rochade items tied to becubic).  
        Either this parameter or the _itemIds_ one, or both, must be specified but they cannot be empty or unspecified at the same time.  
        If both are specified, they are combined together (b3 origin ids being first extracted from specified Rochade items having a B3_ORIGIN attribute)
      schema:
        type: array
        items:
          description: becubic origin id
          type: string
        example: ['ASG_DEV-BECUBIC|10501211<-1602t1595|DWR::DAT::Field', 'ASG_DEV-BECUBIC|52598828<-1602t1099+field+record|DWR::DAT::Record_Type']
      style: form
      explode: true
    filter:
      name: filter
      in: query
      required: false
      description: | 
        TODO_DOCUMENT Lineage filter
      schema:
        type: string
        example: TODO_EXAMPLE
    depth:
      name: depth
      in: query
      required: false
      description: |
        Limits the structural depth to a specified value (zero means unlimited, -1 means value of _'asg.rochade.lineage.depth.default'_ parameter from the application configuration)
      schema:
        type: integer
        default: -1
    limit:
      name: limit
      in: query
      required: false
      description: |
        Limits the result to the specified number of entries (zero means unlimited, -1 means value of _'asg.rochade.lineage.limit.default'_ parameter from the application configuration)
      schema:
        type: integer
        default: -1
    lineageWhat:
      name: what
      in: query
      description: Item attributes to return
      required: false
      schema:
        type: array
        items:
          type: string
        default: [id, scopeId, type, name, absPath, level, direction]
    lineageRouteWhat:
      name: what
      in: query
      description: Item attributes to return
      required: false
      schema:
        type: array
        items:
          type: string
        default: [id, scopeId, type, name]
    arrows:
      name: arrows
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    query:
      name: query
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    diagram:
      name: diagram
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
        default: diagram_svc
    projection:
      name: projection
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
        default: detailed
    nodeLimit:
      name: nodeLimit
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    height:
      name: height
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    width:
      name: width
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    zoom:
      name: zoom
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    showType:
      name: showType
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    showAttr:
      name: showAttr
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    showInfo:
      name: showInfo
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    showInfoLength:
      name: showinfoLength
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    showMetrics:
      name: showMetrics
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    legend:
      name: legend
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    showSelected:
      name: showSelected
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    userRanking:
      name: userRanking
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    graphRankDir:
      name: graphRankDir
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    graphMargin:
      name: graphMargin
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    graphNodeSep:
      name: graphNodeSep
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    graphBgColor:
      name: graphBgColor
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    nodeFontSize:
      name: nodeFontSize
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    nodeFontName:
      name: nodeFontName
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    nodeFontColor:
      name: nodeFontColor
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    nodeColor:
      name: nodeColor
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    nodeShape:
      name: nodeShape
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    nodeStyle:
      name: nodeStyle
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    nodeFillColor:
      name: nodeFillColor
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    nodeFixedSize:
      name: nodeFixedSize
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    edgeFontSize:
      name: edgeFontSize
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    edgeFontName:
      name: edgeFontName
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    edgeFontColor:
      name: edgeFontColor
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    edgeColor:
      name: edgeColor
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    dwhRootNodes:
      name: dwhRootNodes
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    dwhCriticalNodes:
      name: dwhCriticalNodes
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    dwhHighlightNodes:
      name: dwhHighlightNodes
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    dwhHighlightEdges:
      name: dwhHighlightEdges
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    dwhVirtualNodes:
      name: dwhVirtualNodes
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    dwhVirtualEdges:
      name: dwhVirtualEdges
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    dwhDiamond:
      name: dwhDiamond
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    dwhTag:
      name: dwhTag
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    ieStretch:
      name: ieStretch
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    model:
      name: model
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    language:
      name: language
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    hideType:
      name: hideType
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    hideName:
      name: hideName
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    hideTypes:
      name: hideTypes
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    selectMode:
      name: selectMode
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    selectType:
      name: selectType
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string
    selectName:
      name: selectName
      in: query
      required: false
      description: TODO_DOCUMENT
      schema:
        type: string


####################
  examples:
    # CAUTION: again Swagger-UI limitation/bug. While officially documented, Swagger-UI
    # does not support externalValue attribute for examples
    # (see https://github.com/swagger-api/swagger-ui/issues/5433)
    # A work around is provided by modifying the Javascript loading the Swagger-UI widget in index.html
    # (see https://github.com/swagger-api/swagger-ui/issues/5433#issuecomment-901628267)
    lineageDot:
      summary: sample of lineage graph expressed in Graphviz's Dot format
      value: 'Loading...'
      externalValue: 'openAPI/lineages/examples/lineage.gv'
    lineageCMap:
      summary: sample of lineage graph expressed in CMapTools format
      value: 'Loading...'
      externalValue: 'openAPI/lineages/examples/lineage.cmap'
    lineageSVG:
      summary: sample of lineage graph expressed in SVG format
      #value: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M13.418 7.859a.695.695 0 0 1 .978 0 .68.68 0 0 1 0 .969l-3.908 3.83a.697.697 0 0 1-.979 0l-3.908-3.83a.68.68 0 0 1 0-.969.695.695 0 0 1 .978 0L10 11l3.418-3.141z"/></svg>'
      externalValue: 'openAPI/lineages/examples/lineage.svg'
    lineagePNG:
      summary: sample of lineage graph expressed in PNG format
      #value: 'Loading...'
      #externalValue: 'openAPI/lineages/examples/lineage.png'
      value: 'see openAPI/lineages/examples/lineage.png'
    lineageXLS:
      summary: Spreadsheet summarizing the lineage relations
      value: 'see openAPI/lineages/examples/lineage.xls'
      #externalValue: 'openAPI/lineages/examples/lineage.xls'
    lineageResultSet:
      summary: Rochade ResultSet defining the lineage relations
      value:
        size: 6
        columns:
        - id: long
        - scopeId: long
        - type: String
        - name: String
        - level: long
        - direction: String
        - absPath: ResultSet
        result:
        - id: 1401414
          scopeId: 1401317
          type: DWR_RDB_COLUMN
          name: ArtistId
          level: 0
          absPath:
            size: 5
            columns:
            - id: long
            - type: String
            - name: String
            - scopeAttribute: String
            - nameGroup: long
            result:
            - id: 1395778
              type: DWR_RDB_DB_SYSTEM
              name: GECHEM8R2DEV1
              scopeAttribute: root
              nameGroup: 0
            - id: 1401298
              type: DWR_RDB_DATABASE
              name: Chinook
              scopeAttribute: DWR_RDB_HAS_DATABASE
              nameGroup: 0
            - id: 1401299
              type: DWR_RDB_SCHEMA
              name: dbo
              scopeAttribute: DWR_RDB_HAS_SCHEMA
              nameGroup: 0
            - id: 1401317
              type: DWR_RDB_TABLE_OR_VIEW
              name: Album
              scopeAttribute: DWR_RDB_HAS_TABLE_OR_VIEW
              nameGroup: 0
            - id: 1401414
              type: DWR_RDB_COLUMN
              name: ArtistId
              scopeAttribute: DWR_RDB_HAS_COLUMN
              nameGroup: 0
        - id: 1401414
          scopeId: 1401317
          type: DWR_RDB_COLUMN
          name: ArtistId
          level: 0
          absPath:
            size: 5
            columns:
            - id: long
            - type: String
            - name: String
            - scopeAttribute: String
            - nameGroup: long
            result:
            - id: 1395778
              type: DWR_RDB_DB_SYSTEM
              name: GECHEM8R2DEV1
              scopeAttribute: root
              nameGroup: 0
            - id: 1401298
              type: DWR_RDB_DATABASE
              name: Chinook
              scopeAttribute: DWR_RDB_HAS_DATABASE
              nameGroup: 0
            - id: 1401299
              type: DWR_RDB_SCHEMA
              name: dbo
              scopeAttribute: DWR_RDB_HAS_SCHEMA
              nameGroup: 0
            - id: 1401317
              type: DWR_RDB_TABLE_OR_VIEW
              name: Album
              scopeAttribute: DWR_RDB_HAS_TABLE_OR_VIEW
              nameGroup: 0
            - id: 1401414
              type: DWR_RDB_COLUMN
              name: ArtistId
              scopeAttribute: DWR_RDB_HAS_COLUMN
              nameGroup: 0
        - id: 2859465
          scopeId: 2859463
          type: DWR_TFM_TRANSFORMATION_MAP
          name: ArtistId TO ArtistId
          level: 1
          direction: "<-"
          absPath:
            size: 5
            columns:
            - id: long
            - type: String
            - name: String
            - scopeAttribute: String
            - nameGroup: long
            result:
            - id: 2859460
              type: DWR_TFM_SYSTEM
              name: Sqoop.10.33.6.133
              scopeAttribute: root
              nameGroup: 0
            - id: 2859461
              type: DWR_TFM_SYSTEM
              name: imp-Album
              scopeAttribute: DWR_TFM_HAS_TFM_SYSTEM
              nameGroup: 0
            - id: 2859462
              type: DWR_TFM_TASK
              name: Chinook TO media
              scopeAttribute: DWR_TFM_HAS_TFM_TASK
              nameGroup: 0
            - id: 2859463
              type: DWR_TFM_TRANSFORMATION
              name: Album TO albums
              scopeAttribute: DWR_TFM_PERFORMS
              nameGroup: 0
            - id: 2859465
              type: DWR_TFM_TRANSFORMATION_MAP
              name: ArtistId TO ArtistId
              scopeAttribute: DWR_TFM_HAS_TFM_MAP
              nameGroup: 0
        - id: 1127226
          scopeId: 1127225
          type: DWR_RDB_COLUMN
          name: artistid
          level: 2
          direction: "->"
          absPath:
            size: 5
            columns:
            - id: long
            - type: String
            - name: String
            - scopeAttribute: String
            - nameGroup: long
            result:
            - id: 1127174
              type: DWR_RDB_DB_SYSTEM
              name: Hive.10.33.6.133
              scopeAttribute: root
              nameGroup: 0
            - id: 1127175
              type: DWR_RDB_DATABASE
              name: media
              scopeAttribute: DWR_RDB_HAS_DATABASE
              nameGroup: 0
            - id: 1127176
              type: DWR_RDB_SCHEMA
              name: media
              scopeAttribute: DWR_RDB_HAS_SCHEMA
              nameGroup: 0
            - id: 1127225
              type: DWR_RDB_TABLE_OR_VIEW
              name: albums
              scopeAttribute: DWR_RDB_HAS_TABLE_OR_VIEW
              nameGroup: 0
            - id: 1127226
              type: DWR_RDB_COLUMN
              name: artistid
              scopeAttribute: DWR_RDB_HAS_COLUMN
              nameGroup: 0
        - id: 2904696
          scopeId: 2904694
          type: STI_FIELD_LINK
          name: "|ArtistId TO ArtistId|2859465|stitch|2859465|ArtistId TO ArtistId|"
          level: 2
          direction: "<-"
          absPath:
            size: 3
            columns:
            - id: long
            - type: String
            - name: String
            - scopeAttribute: String
            - nameGroup: long
            result:
            - id: 2900585
              type: STI_CONTAINER
              name: TransforMap
              scopeAttribute: root
              nameGroup: 0
            - id: 2904694
              type: STI_STRUCTURE_LINK
              name: "|Album TO albums|2859463|sti_struct|2859463|Album TO albums|"
              scopeAttribute: STI_HAS_STRUCTURE
              nameGroup: 0
            - id: 2904696
              type: STI_FIELD_LINK
              name: "|ArtistId TO ArtistId|2859465|stitch|2859465|ArtistId TO ArtistId|"
              scopeAttribute: STI_HAS_ELEMENT
              nameGroup: 0
        - id: 2859465
          scopeId: 2859463
          type: DWR_TFM_TRANSFORMATION_MAP
          name: ArtistId TO ArtistId
          level: 3
          direction: "->"
          absPath:
            size: 5
            columns:
            - id: long
            - type: String
            - name: String
            - scopeAttribute: String
            - nameGroup: long
            result:
            - id: 2859460
              type: DWR_TFM_SYSTEM
              name: Sqoop.10.33.6.133
              scopeAttribute: root
              nameGroup: 0
            - id: 2859461
              type: DWR_TFM_SYSTEM
              name: imp-Album
              scopeAttribute: DWR_TFM_HAS_TFM_SYSTEM
              nameGroup: 0
            - id: 2859462
              type: DWR_TFM_TASK
              name: Chinook TO media
              scopeAttribute: DWR_TFM_HAS_TFM_TASK
              nameGroup: 0
            - id: 2859463
              type: DWR_TFM_TRANSFORMATION
              name: Album TO albums
              scopeAttribute: DWR_TFM_PERFORMS
              nameGroup: 0
            - id: 2859465
              type: DWR_TFM_TRANSFORMATION_MAP
              name: ArtistId TO ArtistId
              scopeAttribute: DWR_TFM_HAS_TFM_MAP
              nameGroup: 0
    lineageGraphData:
      summary: Sample of a graph data
      value:
        nodes:
        - nodeId: 1
          label: Table Album
          item:
            id: 141317
          hierarchy:
          - id: 33
          - id: 128
          - id: 3698
          - id: 1404040
          fields:
          - fieldId: AlbumId
            label: AlbumId
            item:
              id: 4422
            value: int
          - fieldId: Title
            label: Title
            item:
              id: 943
            value: nvarchar(160)
          - fieldId: ArtistId
            label: ArtistId
            item:
              id: 141438
            value: int
        - nodeId: 2
          label: Table Albums
          item:
            id: 1127225
          hierarchy:
          - id: 549
          - id: 78433
          - id: 86984
          - id: 1501458
          fields:
          - fieldId: albumid
            label: albumid
            item:
              id: 6428
            value: int
          - fieldId: albumTitle
            label: albumTitle
            item:
              id: 94287
            value: String
          - fieldId: artistid
            label: artistid
            item:
              id: 32154
            value: int
        edges:
        - fromNodeId: 1
          fromFieldId: AlbumId
          fromSide: value
          toNodeId: 2
          toFieldId: albumid
          toSide: item
          items:
          - id: 337584
        - fromNodeId: 1
          fromFieldId: Title
          fromSide: value
          toNodeId: 2
          toFieldId: albumTitle
          toSide: item
          items:
          - id: 998741
        - fromNodeId: 1
          fromFieldId: ArtistId
          fromSide: value
          toNodeId: 2
          toFieldId: artistid
          toSide: item
          items:
          - id: 998741
    lineageRouteResultSet:
      value:
        size: 1
        columns:
        - id: long
        - scopeId: long
        - type: String
        - name: String
        result:
        - id: 6071074
          scopeId: 0
          type: DWR_LIN_TAG
          name: 992Demo
    lineageRouteWaypoints:
      value:
        - 6348
        - 22957
    graphicsFormats:
      value:
        - format: png
          mediaType: image/png
        - format: gif
          mediaType: image/gif
        - format: jpg
          mediaType: image/jpg
        - format: jpeg
          mediaType: image/jpg
        - format: svg
          mediaType: image/svg+xml
        - format: cmap
          mediaType: text/plain; content=cmap
        - format: dot
          mediaType: text/plain; content=dot
        

####################
  responses:
    BadRequest:
      description: A bad request was submitted (HTTP 400)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Unauthorized:
      description: Unauthorized (HTTP 401)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JerseyError'
    Forbidden:
      description: You are not authorized to perform this action (HTTP 403)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    NotFound:
      description: The specified resource was not found (HTTP 404)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JerseyError'
    Conflict:
      description: A conflict occurred (HTTP 409)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    PreconditionFailed:
      description: Condition is not fulfilled (HTTP 412)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    PreconditionRequired:
      description: Condition is required (HTTP 428)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    InternalServerError:
      description: An error occurred on the server (HTTP 500)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    NotImplemented:
      description: Method not implemented (HTTP 501)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    ServiceUnavailable:
      description: Server is not ready to handle the request (HTTP 503)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Unexpected:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JerseyError'


####################
  schemas:
    # Schema for error response body when Jersey dispatcher triggers the error
    JerseyError:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        path:
          type: string
      required:
        - timestamp
        - status
        - error
        - path

    # Schema for error response body when ASG-Services-SDK maps automatically one of its standard com.asg.services.common.exceptions into response body
    SDKError:
      type: object
      properties:
        code:
          type: string
          pattern: '^\d{3}$'
        message:
          type: string
        correlationId:
          type: string
    
    ResultSetColumn:
      description: Description of a column in a ResultSet. Maps any key representing the column name to the column type.
      type: object
      # key is free but value is an enum
      additionalProperties:
        # if we define the enum inline, openapi-generator fails to generate properly dictionaries that have enum as value
        # the workaround is to define the enum as a regular schema and then reference it 
        #type: string
        #enum:
        #  - long
        #  - String
        #  - boolean
        #  - ResultSet
        #  - Blob
        #  - Date
        $ref: '#/components/schemas/ResultSetColumnType'
    
    ResultSetColumnType:
      description: Possible types for a ResultSet column.
      type: string
      # see SysColTypes
      enum:
        - long
        - String
        - boolean
        - ResultSet
        - Blob
        - Date
    
    ResultSet:
      description: Rochade ResultSet
      type: object
      properties:
        size:
          type: integer
        columns:
          $ref: '#/components/schemas/ResultSetColumn'
        result:
          type: array
          items:
            type: object
    
    LineageGraphData:
      summary: offers a representation of nodes and edges in a more natural format than the ResultSet
      description: |
        **CAUTION this schema is not definitive. It is just about suggesting a rough idea of how such response data could look like.**  
        Nodes and edges representing a graph of a lineage.
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/GraphNode'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/GraphEdge'
    
    GraphNodeIdentifier:
      description: |
        Node identifier (used to define edges).  
        Unicity of the identifier is guaranteed across the whole graph.
      type: integer
    
    GraphFieldIdentifier:
      description: |
        Field identifier (used to define port for edges).  
        Unicity of the identifier is guaranteed **only** across the container graph node.
      type: string
    
    GraphItem:
      description: an item associated in a way or the other with a graph node
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: identifier of the main item associated with that node
    
    GraphNodeField:
      description: sub-component of a graph node (inner child)
      type: object
      properties:
        fieldId:
          $ref: '#/components/schemas/GraphFieldIdentifier'
        label:
          type: string
          description: the label to display the field
        item:
          $ref: '#/components/schemas/GraphItem'
          description: the item associated with that field
        value:
          type: string
          description: the value of that field
    
    GraphNode:
      description: representation of a node in a graph
      type: object
      properties:
        nodeId:
          $ref: '#/components/schemas/GraphNodeIdentifier'
        label:
          type: string
          description: the main label of the node
        item:
          $ref: '#/components/schemas/GraphItem'
        hierarchy:
          type: array
          items:
            $ref: '#/components/schemas/GraphItem'
          description: hierarchy of items associated with the node (container or owner items, grouped items...)
        fields:
          type: array
          items: 
            $ref: '#/components/schemas/GraphNodeField'
          description: subparts of the graph node (inner children)
    
    GraphPortSide:
      description: indicates if the port of the edge is located on the item or value side of the field
      type: string
      enum: [ITEM, VALUE]
    
    GraphEdge:
      description: representation of an edge in a graph
      type: object
      properties:
        fromNodeId:
          $ref: '#/components/schemas/GraphNodeIdentifier'
        fromFieldId:
          $ref: '#/components/schemas/GraphFieldIdentifier'
        fromSide:
          $ref: '#/components/schemas/GraphPortSide'
        toNodeId:
          $ref: '#/components/schemas/GraphNodeIdentifier'
        toFieldId:
          $ref: '#/components/schemas/GraphFieldIdentifier'
        toSide:
          $ref: '#/components/schemas/GraphPortSide'
        items:
          type: array
          items:
            $ref: '#/components/schemas/GraphItem'
          description: items associated with the edge (like transformations, stiching data, collapsed intermediate items...)
    
    LineageRouteWaypoints:
      description: |
          Array of item identifiers that must be used as waypoint for the lineage route.
      type: array
      items:
        description: Item id
        type: integer
        format: int64
    
    GraphicFormat:
      description: an output format for grahic operations
      type: object
      properties:
        format:
          type: string
          description: common identifier of the format
        mediaType:
          type: string
          description: MIME type associated with that format. If the format is IANA registered, that must be the official media type of the format.
    