openapi: "3.0.0"
info:
  version: 1.0.0
  title: Queries
  description: Queries OpenAPI definition

security:
  - BasicAuth: []
  - BearerAuth: []

servers:
  - url: '/rest'

tags:
  - name: Queries

paths:
  # TODO: This is a placeholder. You need to change this to work for your service
  /queries/sdcac:
    get:
      tags:
        - Queries
      operationId: getSDCACQuery
      summary: execute SDCAC query
      description: Search items that fulfill the given SDCAC condition in the Query definition parameter, directly or indirectly from the namespace (children and grandchildren) of the given start items
      parameters:
        - name: querySource
          in: query
          required: true
          description: either name of an existing SDCAC query or textual definition of a such query
          schema:
            type: string
            default: 'XNAME * *  ~/ @*'
        - name: scope
          in: query
          required: false
          allowEmptyValue: true
          description: Rochade query reference start items
          # Trick: use 'content' as 'we want this param really been sent as JSON, not as exploded parameter or other stuff
          # see https://stackoverflow.com/questions/65697906/how-to-declare-query-object-in-the-parameters
          # see https://swagger.io/docs/specification/describing-parameters/#schema-vs-content
          # But Swagger codegen does not support such schema, that is why we use OpenAPI generator
          content:
            application/json:  # <---- media type indicates how to serialize / deserialize the parameter content
              schema:
                type: array
                nullable: true
                # work-around another issue in Swagger-UI that goes into javascript error, if trying rest-point letting that complex parameter empty
                default: []
                items:
                  $ref: '#/components/schemas/ItemReference'
          #schema:
          #  type: array
          #  items:
          #    $ref: '#/components/schemas/ItemReference'
        - name: offset
          in: query
          description: 'Positions the first item in response by specifying the numeric position of the item in the order of overall result set. By default, the value "0" returns first item in the overall result set. Negative value is not allowed.'
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: 'Limits the result to the specified number of entries (zero means unlimited, -1 means value of asg.rochade.query.limit.default parameter from the application configuration)'
          required: false
          schema:
            type: integer
            default: -1
        - name: what
          in: query
          description: Attributes to return
          required: false
          schema:
            type: array
            items:
              type: string
            default: [id, scopeId, type, name]
      responses:
        '200':
          description: List of items
          content:
            application/vnd.rochade-services-resultset.v1+json:
              schema:
                $ref: '#/components/schemas/ResultSet'
              example:
                size: 6
                columns:
                - id: long
                - scopeId: long
                - type: String
                - name: String
                - level: long
                - direction: String
                - absPath: ResultSet
                result:
                - id: 1401414
                  scopeId: 1401317
                  type: DWR_RDB_COLUMN
                  name: ArtistId
                  level: 0
                  absPath:
                    size: 5
                    columns:
                    - id: long
                    - type: String
                    - name: String
                    - scopeAttribute: String
                    - nameGroup: long
                    result:
                    - id: 1395778
                      type: DWR_RDB_DB_SYSTEM
                      name: GECHEM8R2DEV1
                      scopeAttribute: root
                      nameGroup: 0
                    - id: 1401298
                      type: DWR_RDB_DATABASE
                      name: Chinook
                      scopeAttribute: DWR_RDB_HAS_DATABASE
                      nameGroup: 0
                    - id: 1401299
                      type: DWR_RDB_SCHEMA
                      name: dbo
                      scopeAttribute: DWR_RDB_HAS_SCHEMA
                      nameGroup: 0
                    - id: 1401317
                      type: DWR_RDB_TABLE_OR_VIEW
                      name: Album
                      scopeAttribute: DWR_RDB_HAS_TABLE_OR_VIEW
                      nameGroup: 0
                    - id: 1401414
                      type: DWR_RDB_COLUMN
                      name: ArtistId
                      scopeAttribute: DWR_RDB_HAS_COLUMN
                      nameGroup: 0
                - id: 1401414
                  scopeId: 1401317
                  type: DWR_RDB_COLUMN
                  name: ArtistId
                  level: 0
                  absPath:
                    size: 5
                    columns:
                    - id: long
                    - type: String
                    - name: String
                    - scopeAttribute: String
                    - nameGroup: long
                    result:
                    - id: 1395778
                      type: DWR_RDB_DB_SYSTEM
                      name: GECHEM8R2DEV1
                      scopeAttribute: root
                      nameGroup: 0
                    - id: 1401298
                      type: DWR_RDB_DATABASE
                      name: Chinook
                      scopeAttribute: DWR_RDB_HAS_DATABASE
                      nameGroup: 0
                    - id: 1401299
                      type: DWR_RDB_SCHEMA
                      name: dbo
                      scopeAttribute: DWR_RDB_HAS_SCHEMA
                      nameGroup: 0
                    - id: 1401317
                      type: DWR_RDB_TABLE_OR_VIEW
                      name: Album
                      scopeAttribute: DWR_RDB_HAS_TABLE_OR_VIEW
                      nameGroup: 0
                    - id: 1401414
                      type: DWR_RDB_COLUMN
                      name: ArtistId
                      scopeAttribute: DWR_RDB_HAS_COLUMN
                      nameGroup: 0
                - id: 2859465
                  scopeId: 2859463
                  type: DWR_TFM_TRANSFORMATION_MAP
                  name: ArtistId TO ArtistId
                  level: 1
                  direction: "<-"
                  absPath:
                    size: 5
                    columns:
                    - id: long
                    - type: String
                    - name: String
                    - scopeAttribute: String
                    - nameGroup: long
                    result:
                    - id: 2859460
                      type: DWR_TFM_SYSTEM
                      name: Sqoop.10.33.6.133
                      scopeAttribute: root
                      nameGroup: 0
                    - id: 2859461
                      type: DWR_TFM_SYSTEM
                      name: imp-Album
                      scopeAttribute: DWR_TFM_HAS_TFM_SYSTEM
                      nameGroup: 0
                    - id: 2859462
                      type: DWR_TFM_TASK
                      name: Chinook TO media
                      scopeAttribute: DWR_TFM_HAS_TFM_TASK
                      nameGroup: 0
                    - id: 2859463
                      type: DWR_TFM_TRANSFORMATION
                      name: Album TO albums
                      scopeAttribute: DWR_TFM_PERFORMS
                      nameGroup: 0
                    - id: 2859465
                      type: DWR_TFM_TRANSFORMATION_MAP
                      name: ArtistId TO ArtistId
                      scopeAttribute: DWR_TFM_HAS_TFM_MAP
                      nameGroup: 0
                - id: 1127226
                  scopeId: 1127225
                  type: DWR_RDB_COLUMN
                  name: artistid
                  level: 2
                  direction: "->"
                  absPath:
                    size: 5
                    columns:
                    - id: long
                    - type: String
                    - name: String
                    - scopeAttribute: String
                    - nameGroup: long
                    result:
                    - id: 1127174
                      type: DWR_RDB_DB_SYSTEM
                      name: Hive.10.33.6.133
                      scopeAttribute: root
                      nameGroup: 0
                    - id: 1127175
                      type: DWR_RDB_DATABASE
                      name: media
                      scopeAttribute: DWR_RDB_HAS_DATABASE
                      nameGroup: 0
                    - id: 1127176
                      type: DWR_RDB_SCHEMA
                      name: media
                      scopeAttribute: DWR_RDB_HAS_SCHEMA
                      nameGroup: 0
                    - id: 1127225
                      type: DWR_RDB_TABLE_OR_VIEW
                      name: albums
                      scopeAttribute: DWR_RDB_HAS_TABLE_OR_VIEW
                      nameGroup: 0
                    - id: 1127226
                      type: DWR_RDB_COLUMN
                      name: artistid
                      scopeAttribute: DWR_RDB_HAS_COLUMN
                      nameGroup: 0
                - id: 2904696
                  scopeId: 2904694
                  type: STI_FIELD_LINK
                  name: "|ArtistId TO ArtistId|2859465|stitch|2859465|ArtistId TO ArtistId|"
                  level: 2
                  direction: "<-"
                  absPath:
                    size: 3
                    columns:
                    - id: long
                    - type: String
                    - name: String
                    - scopeAttribute: String
                    - nameGroup: long
                    result:
                    - id: 2900585
                      type: STI_CONTAINER
                      name: TransforMap
                      scopeAttribute: root
                      nameGroup: 0
                    - id: 2904694
                      type: STI_STRUCTURE_LINK
                      name: "|Album TO albums|2859463|sti_struct|2859463|Album TO albums|"
                      scopeAttribute: STI_HAS_STRUCTURE
                      nameGroup: 0
                    - id: 2904696
                      type: STI_FIELD_LINK
                      name: "|ArtistId TO ArtistId|2859465|stitch|2859465|ArtistId TO ArtistId|"
                      scopeAttribute: STI_HAS_ELEMENT
                      nameGroup: 0
                - id: 2859465
                  scopeId: 2859463
                  type: DWR_TFM_TRANSFORMATION_MAP
                  name: ArtistId TO ArtistId
                  level: 3
                  direction: "->"
                  absPath:
                    size: 5
                    columns:
                    - id: long
                    - type: String
                    - name: String
                    - scopeAttribute: String
                    - nameGroup: long
                    result:
                    - id: 2859460
                      type: DWR_TFM_SYSTEM
                      name: Sqoop.10.33.6.133
                      scopeAttribute: root
                      nameGroup: 0
                    - id: 2859461
                      type: DWR_TFM_SYSTEM
                      name: imp-Album
                      scopeAttribute: DWR_TFM_HAS_TFM_SYSTEM
                      nameGroup: 0
                    - id: 2859462
                      type: DWR_TFM_TASK
                      name: Chinook TO media
                      scopeAttribute: DWR_TFM_HAS_TFM_TASK
                      nameGroup: 0
                    - id: 2859463
                      type: DWR_TFM_TRANSFORMATION
                      name: Album TO albums
                      scopeAttribute: DWR_TFM_PERFORMS
                      nameGroup: 0
                    - id: 2859465
                      type: DWR_TFM_TRANSFORMATION_MAP
                      name: ArtistId TO ArtistId
                      scopeAttribute: DWR_TFM_HAS_TFM_MAP
                      nameGroup: 0
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /queries/lineage:
    post:
      tags:
        - Queries
      summary: Retrieve items, links and references associated with a Lineage
      description: |
        Provide items, links and references resulting from a Lineage calculation.  
        
        _Note: For technical reasons this is published as POST method, because the request parameters might not fit into the URL._
      operationId: postLineageGraphData
      requestBody:
        required: true
        content:
          application/vnd.rochade-services-queries-lineage.v1+json:
            schema:
              $ref: '#/components/schemas/LineageDataRequest'

      responses:
        '200':
          description: |
            successful operation  
            
            For `application/vnd.rochade-services-queries-lineage-resultgraph.v1+json` content type:
            > the output is a graph model containing the items as nodes, the links as edges and the references as additional data.  

          content:
            application/vnd.rochade-services-queries-lineage-resultgraph.v1+json:
              schema:
                $ref: '#/components/schemas/LineageResultGraph'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /queries/browse:
    post:
      tags:
        - Queries
      operationId: browseItems
      summary: Fetches items with requested rochade attributes based on SDCAC query
      description: |
        Fetches items with requested rochade attributes based on SDCAC query
        
        _Note: For technical reasons this is published as POST method, because the request parameters might not fit into the URL._
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemsBrowseRequest'

      responses:
        '200':
          description: List of all the queried items
          content:
            application/vnd.rochade-services-queries-browse.v1+json:
              schema:
                $ref: '#/components/schemas/MLResultItems'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /queries/mpath/{queryName}:
    get:
      tags:
        - Queries
      operationId: getMPathQuery
      summary: Execute a maskable path query on the given items
      description: |
        ___TAKE CARE___ This execution is neither continuable nor interruptable. All the results up to the _limit_ are computed then returned as response to this call.
        If processing needs to be controlled with continuation or interruption aspect, refer to the [MPath execution](#Queries/startMPathQuery) operation.
      parameters:
        - name: queryName
          in: path
          required: true
          description: name of the maskable path query
          schema:
            type: string
        - name: mask
          in: query
          description: Identifies a mask to be used for this query
          required: false
          schema:
            type: string
        - name: seedItems
          in: query
          required: true
          allowEmptyValue: true
          description: Collection of items to run query on
          # Trick: use 'content' as 'we want this param really been sent as JSON, not as exploded parameter or other stuff
          # see https://stackoverflow.com/questions/65697906/how-to-declare-query-object-in-the-parameters
          # see https://swagger.io/docs/specification/describing-parameters/#schema-vs-content
          # But Swagger codegen does not support such schema, that is why we use OpenAPI generator
          content:
            application/json:  # <---- media type indicates how to serialize / deserialize the parameter content
              schema:
                type: array
                nullable: true
                # work-around another issue in Swagger-UI that goes into javascript error, if trying rest-point letting that complex parameter empty
                default: []
                items:
                  $ref: '#/components/schemas/ItemReference'
          #schema:
          #  type: array
          #  items:
          #    $ref: '#/components/schemas/ItemReference'
        - name: limit
          in: query
          description: 'Limits the result to the specified number of entries (zero means unlimited, -1 means value of asg.rochade.query.limit.default parameter from the application configuration)'
          required: false
          schema:
            type: integer
            default: -1
        - name: depth
          in: query
          description: 'Limit the structural depth to a specified value (-1 means value of asg.rochade.query.depth.default parameter from the application configuration)'
          required: false
          schema:
            type: integer
            default: -1
        - name: what
          in: query
          description: Attributes to return
          required: false
          schema:
            type: array
            items:
              type: string
            default: [id, scopeId, type, name]
      responses:
        '200':
          description: List of items
          content:
            application/vnd.rochade-services-resultset.v1+json:
              schema:
                $ref: '#/components/schemas/ResultSet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /queries/mpath/executions/{queryName}:
    post:
      tags:
        - Queries
      operationId: startMPathQuery
      summary: Start execution of a maskable path query on the given items
      description: |
        This execution cannot be directly limited (no _limit_ parameter) but it is continued until it is interrupted by getting the results computed until there.
        As soon as the results are retrieved, the execution is definitely stopped and can no more be continued.
      requestBody:
        description: Optional, but the parameter values provided in request body have precedence over values for same parameters provided into query.
        required: false
        content:
          #application/json: {}
          application/json:
            schema:
              $ref: '#/components/schemas/MPathQueryExecution'
      parameters:
        - name: queryName
          in: path
          required: true
          description: name of the maskable path query
          schema:
            type: string
        - name: mask
          in: query
          description: Identifies a mask to be used for this query
          required: false
          schema:
            type: string
            default: ""
        - name: seedItems
          in: query
          required: true
          allowEmptyValue: true
          description: Collection of items to run query on
          # Trick: use 'content' as 'we want this param really been sent as JSON, not as exploded parameter or other stuff
          # see https://stackoverflow.com/questions/65697906/how-to-declare-query-object-in-the-parameters
          # see https://swagger.io/docs/specification/describing-parameters/#schema-vs-content
          # But Swagger codegen does not support such schema, that is why we use OpenAPI generator
          content:
            application/json:  # <---- media type indicates how to serialize / deserialize the parameter content
              schema:
                type: array
                nullable: true
                # work-around another issue in Swagger-UI that goes into javascript error, if trying rest-point letting that complex parameter empty
                default: []
                items:
                  $ref: '#/components/schemas/ItemReference'
          #schema:
          #  type: array
          #  items:
          #    $ref: '#/components/schemas/ItemReference'
        - name: chunkSize
          in: query
          description: 'How much results must be computed before pausing for continuation or termination instructions (-1 means value of asg.rochade.query.limit.default parameter from the application configuration, zero has no meaning and is invalid)'
          required: false
          schema:
            type: integer
            default: -1
        - name: depth
          in: query
          description: 'Limit the structural depth to a specified value (-1 means value of asg.rochade.query.depth.default parameter from the application configuration)'
          required: false
          schema:
            type: integer
            default: -1
        - name: what
          in: query
          description: Attributes to return
          required: false
          schema:
            type: array
            items:
              type: string
            default: [id, scopeId, type, name]
        - name: onDemand
          in: query
          description: |
            switch between two execution modes:
            * if ''true', the query runs for a slice of result (which size is given by _chunkSize_), then the query goes into idle mode waiting for the [continue](#Queries/continueMPathQuery) operation
            * if 'false', the query is executed in a continuous way, collecting on its own as much as results as it can
            
            In both cases the query is run in the background and executed until it faces one of the following conditions:
            * it is interrupted by the [terminate and get results](#Queries/terminateMPathQuery) operation
            * there is no more result to collect
            * it faces an error
          schema:
            type: boolean
            default: true
      responses:
        '201':
          description: |
            Contains continuation identifier for MPath execution that must be provided to subsequent operations:
            * [get execution state](#Queries/getStateMPathQuery)
            * [terminate and get results](#Queries/terminateMPathQuery)
          content:
            text/plain:
              schema:
                type: string
          headers:
            Location:
              description: URL of the created execution
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /queries/mpath/executions/{executionId}/state:
    get:
      tags:
        - Queries
      operationId: getStateMPathQuery
      summary: Retrieve the current state of the execution of a MPath Query
      description: |
        This execution must be started using the [start MPath Query execution](#Queries/startMPathQuery) endpoint,
        then the returned identifier must be provided to this operation to follow the progression of that execution.
      parameters:
        - name: executionId
          in: path
          required: true
          description: identifier obtained by starting the execution of a MPath query
          schema:
            type: string
      responses:
        '200':
          description: information about the execution of a MPath query (STARTED/RUNNING/ENDED, COMPLETE/PARTIAL results, number of results)
          content:
            application/vnd.rochade-services-mpath-query-execution-sate.v1+json:
              schema:
                $ref: '#/components/schemas/MPathQueryExecutionState'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /queries/mpath/executions/{executionId}/continue:
    patch:
      tags:
        - Queries
      operationId: continueMPathQuery
      summary: Continue the execution of the MPath query to retrieve more results
      description: |
        This operation can only be invoked if the execution has been started with 'true' for the _onDemand_ parameter.
        See the [start MPath Query execution](#Queries/startMPathQuery) endpoint.
        Invoking this operation while it is not the case will result in a '412' PreconditionFailed error.
      parameters:
        - name: executionId
          in: path
          required: true
          description: identifier obtained by starting the execution of a MPath query
          schema:
            type: string
      responses:
        '204':
          description: No content is returned but more results are collected on the server.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'

  /queries/mpath/executions/{executionId}/results:
    get:
      tags:
        - Queries
      operationId: terminateMPathQuery
      summary: Terminate the execution of a MPath Query and get the results retrieved so far
      description: |
        This execution must be started using the [start MPath Query execution](#Queries/startMPathQuery) endpoint,
        then the returned identifier must be provided to this operation to terminate that execution and collect available result.
        As soon as this operation is invoked, it is terminal. The corresponding execution is stopped and the MPath query
        cannot be continued to get extra results.
        
        Invoking again this operation with same execution identifier will result in a '404' NotFound error.
      parameters:
        - name: executionId
          in: path
          required: true
          description: identifier obtained by starting the execution of a MPath query
          schema:
            type: string
      responses:
        '200':
          description: |
            Results retrieved so far by the execution of the query.
            It can be all retrievable results, according to the depth limit,
            or only some of them if this operation has been invoked before completion of the query.
            See [get execution state](#Queries/getStateMPathQuery).
          content:
            application/vnd.rochade-services-mpath-query-execution-result.v1+json:
              schema:
                $ref: '#/components/schemas/MPathQueryExecutionResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Unexpected'


####################
components:
  securitySchemes:
    BasicAuth: # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
    BearerAuth: # <-- arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes


  responses:
    BadRequest:
      description: A bad request was submitted (HTTP 400)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Unauthorized:
      description: Unauthorized (HTTP 401)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Forbidden:
      description: You are not authorized to perform this action (HTTP 403)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    NotFound:
      description: The specified resource was not found (HTTP 404)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Conflict:
      description: A conflict occurred (HTTP 409)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    PreconditionFailed:
      description: Condition is not fulfilled (HTTP 412)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    PreconditionRequired:
      description: Condition is required (HTTP 428)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    TooManyRequests:
      description: Too many requests in a given amount of time, aka "rate limiting" (HTTP 429).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    InternalServerError:
      description: An error occurred on the server (HTTP 500)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    NotImplemented:
      description: Method not implemented (HTTP 501)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    ServiceUnavailable:
      description: Server is not ready to handle the request (HTTP 503)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SDKError'
    Unexpected:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JerseyError'


  schemas:
    # Schema for error response body when Jersey dispatcher triggers the error
    JerseyError:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        path:
          type: string
      required:
        - timestamp
        - status
        - error
        - path

    # Schema for error response body when ASG-Services-SDK maps automatically one of its standard com.asg.services.common.exceptions into response body
    SDKError:
      type: object
      properties:
        code:
          type: string
          pattern: '^\d{3}$'
        message:
          type: string
        correlationId:
          type: string

    Timestamp:
      description: |
        Instant of data retrieval (for cache invalidation).  
        This is an instantaneous point on the time-line (see [Java 8 Instant](https://docs.oracle.com/javase/8/docs/api/java/time/Instant.html)) represented by the number of milliseconds from the epoch of 1970-01-01T00:00:00Z.
      type: integer
      format: int64
      nullable: true

    ResultSetColumn:
      description: Description of a column in a ResultSet. Maps any key representing the column name to the column type.
      type: object
      # key is free but value is an enum
      additionalProperties:
        # if we define the enum inline, openapi-generator fails to generate properly dictionnaries that have enum as value
        # the workaround is to define the enum as a regular schema and then reference it
        #type: string
        #enum:
        #  - long
        #  - String
        #  - boolean
        #  - ResultSet
        #  - Blob
        #  - Date
        #  - void
        $ref: '#/components/schemas/ResultSetColumnType'

    ResultSetColumnType:
      description: Possible types for a ResultSet column.
      type: string
      # see SysColTypes
      enum:
        - long
        - String
        - boolean
        - ResultSet
        - Blob
        - Date
        - void

    ResultSet:
      description: Rochade ResultSet
      type: object
      properties:
        size:
          type: integer
        columns:
          $ref: '#/components/schemas/ResultSetColumn'
        result:
          type: array
          items:
            type: object

    # recursive schemas are badly processed by SwaggerUI
    # see https://stackoverflow.com/questions/36866035/how-to-refer-to-enclosing-type-definition-recursively-in-openapi-swagger
    # one proposed workaround is tricking with allOf
    ItemReference:
      description: Reference to an item
      type: object
      #required:
        #- id
      properties:
        type:
          type: string
          description: Item type
        name:
          type: string
          description: Name of item
        id:
          type: integer
          format: int64
          description: Item ID
        nameGroup:
          type: integer
          format: int64
          description: Name group
        scopeId:
          type: integer
          format: int64
          description: ScopeId of item if known
        scopeAttribute:
          type: string
          description: Name of scope attribute
        scope:
          # recursive schemas are badly processed by SwaggerUI
          # see https://stackoverflow.com/questions/36866035/how-to-refer-to-enclosing-type-definition-recursively-in-openapi-swagger
          # one proposed workaround is tricking with , but it does not allow to accomplish the real purpose of recursive schema!
          # Not only Swagger-codegen does not support cycling schemas but also Swagger-UI fails regarding such definition.
          # It is a shame because openapi-generator manages them very well, so we are restrained just by Swagger-UI.
          # Solution is to define the proper recursive schema for processing by openapi-generator, and have a web filter
          # that tweak this file on the fly when Swagger-UI download this resource from server.
          # This is the purpose of SWAGGER-UI-XXX-YYYY tags. Content in between is added or removed on the fly by
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/ItemReference'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: recursive point (=> ItemReference)
          #type: object
          # SWAGGER-UI-IN-END

    MPathQueryExecution:
      description: parameters to execute a MPath query
      type: object
      properties:
        mask:
          description: Identifies a mask to be used for this query
          type: string
          default: ""
        seedItems[]:
          description: Collection of items to run query on
          type: array
          items:
            $ref: '#/components/schemas/ItemReference'
          nullable: true
          default: []
        chunkSize:
          description: 'How much results must be computed before pausing for continuation or termination instructions (-1 means value of asg.rochade.query.limit.default parameter from the application configuration, zero has no meaning and is invalid)'
          type: integer
          default: -1
        depth:
          description: 'Limit the structural depth to a specified value (-1 means value of asg.rochade.query.depth.default parameter from the application configuration)'
          type: integer
          default: -1
        what[]:
          description: Attributes to return
          type: array
          items:
            type: string
          default: [id, scopeId, type, name]
        onDemand:
          description: |
            switch between two execution modes:
            * if ''true', the query runs for a slice of result (which size is given by _chunkSize_), then the query goes into idle mode waiting for the [continue](#Queries/continueMPathQuery) operation
            * if 'false', the query is executed in a continuous way, collecting on its own as much as results as it can
            
            In both cases the query is run in the background and executed until it faces one of the following conditions:
            * it is interrupted by the [terminate and get results](#Queries/terminateMPathQuery) operation
            * there is no more result to collect
            * it faces an error
          type: boolean
          default: true

    ItemsBrowseRequest:
      description: the request structure for a browse API call
      type: object
      properties:
        itemIds:
          description: query seed item ids
          type: array
          items:
            $ref: '#/components/schemas/ItemId'
        querySource:
          description: either name of an existing SDCAC query or textual definition of a such query
          type: string
        what:
          description: "Attributes to return"
          type: array
          items:
            type: string
          default: [ "id", "scopeId", "type", "name" ]
          nullable: true

    MLResultItems:
      description: |
        Describes the list of Business Application items that exist in the Rochade Server.
      type: array
      items:
        $ref: '#/components/schemas/MLResultItem'
      example:
        - id: 4827396
          type: DWR_ARC_BUSINESS_APPLICATION
          name: BA1
          scopeId: 0
          properties:
            level: 0
          languages: { }
        - id: 4827397
          type: DWR_ARC_BUSINESS_APPLICATION
          name: BA2
          scopeId: 0
          properties:
            level: 0
          languages: { }
        - id: 4827398
          type: DWR_ARC_BUSINESS_APPLICATION
          name: BA3
          scopeId: 0
          properties:
            level: 0
          languages: { }
        - id: 4135430
          type: DWR_ARC_BUSINESS_APPLICATION
          name: US-BigData Clusters
          scopeId: 0
          properties:
            level: 0
          languages: { }

    MLResultItem:
      description: |
        An item with language variance values for attributes that have multi-languages capability.  
        The value are provided for all languages specified in the _displayLangs_ request parameter.  
        If the _displayLangs_ request parameter contains the default language of the Rochade Subject Area, the values for that language are repeated in the _languages_ attribute.  
        If the _displayLangs_ request parameter is empty or not provided, the _languages_ attribute will be empty.
      type: object
      required:
        - languages
      allOf:
        - $ref: '#/components/schemas/ResultItem'
        - type: object
          properties:
            languages:
              description: |
                Keys are languages in ISO 639-1 format (two-letter codes), OR empty for the default language.  
                Values are mapping between a MLC attribute and its value in that language.
              type: object
              additionalProperties:
                $ref: '#/components/schemas/MLAttributes'
              nullable: true

    ResultItem:
      description: |
        An item with its requested attributes.  
        The values of MLC attributes are provided in the default language of the Rochade Subject Area (which is **not** necessarily the primary requested language).  
        All the requested attributes will be present but the ones that do not exist or have no value will be null.
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/ItemId'
        scopeId:
          $ref: '#/components/schemas/ItemId'
        type:
          description: Rochade Item type (if requested)
          type: string
        name:
          description: Name of item in the default language (if requested)
          type: string
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResultItemAttributes'

    MLAttributes:
      description: |
        Attribute values for a specific language variance.  
        Keys are attribute names.  
        Values are attribute value in the contextual language.  

        Values of each attribute can be:
        * numeric (e.g. for id),
        * text (e.g. for definition),
        * instants represented in ISO 8601 format (e.g. for history aspects),
        * arrays of text (e.g. for tags),
        * arrays of object (e.g. for a link attribute)  

        Depending on the language, not all but only some attributes are present. If absent it means the item has no value in the contextual language for that attribute.
      type: object

    ItemId:
      description: The unique identifier of the item
      type: integer
      format: int64
      example: 1234

    ResultItemAttributes:
      description: |
        Attribute values for a Result Item.  
        Keys are attribute names.  
        Values are attribute value.  

        Values of each attribute can be:
        * numeric (e.g. for id),
        * text (e.g. for definition),
        * instants represented in ISO 8601 format (e.g. for history aspects),
        * arrays of text (e.g. for tags),
        * arrays of object (e.g. for a link attribute)
      type: object

    MPathQueryExecutionState:
      description: information about the interruptible execution of a MPath query (PENDING/RUNNING/IDLE/ENDED, COMPLETE/PARTIAL results, number of results)
      type: object
      properties:
        state:
          description: indicates if the query is still running or not, or waiting scheduling for execution, or faced an error. Idle applies only if execution is started with onDemand=true.
          type: string
          enum:
            - PENDING
            - RUNNING
            - IDLE
            - ENDED
            - FAILED
        completeness:
          description: indicates if the query has retrieved all the possible results (according to the depth limit) or only some of them
          type: string
          enum:
            - COMPLETE
            - PARTIAL
        numberOfResults:
          description: how much results have been retrieved so far
          type: integer
          format: int32

    MPathQueryExecutionResult:
      description: result of the interruptible execution of a MPath query
      type: object
      properties:
        completeness:
          description: indicates if the query has retrieved all the possible results (according to the depth limit) or only some of them or none at all (then associated ResultSet can even be null)
          type: string
          enum:
            - NONE
            - COMPLETE
            - PARTIAL
        resultSet:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/ResultSet'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #allOf:
          #  - $ref: '#/components/schemas/ResultSet'
          #nullable: true
          # SWAGGER-UI-IN-END

    FilterIds:
      description: list of unique identifiers of the filter items.
      type: array
      items:
        type: string
        
    BaseMapFilters:
      description: Describes the map filters that user selected and wanted to save.
      type: object
      properties:
        groups:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/FilterIds'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: list of unique identifiers of the items selected to filter under groups.
          #allOf:
          #  - $ref: '#/components/schemas/FilterIds'
          # SWAGGER-UI-IN-END
        applications:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/FilterIds'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: list of unique identifiers of the items selected to filter under applications.
          #allOf:
          #  - $ref: '#/components/schemas/FilterIds'
          # SWAGGER-UI-IN-END
        tags:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/FilterIds'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: list of unique identifiers of the items selected to filter under tags.
          #allOf:
          #  - $ref: '#/components/schemas/FilterIds'
          # SWAGGER-UI-IN-END
          
    SelectedMapFilters:
      description: Describes the map filters that user selected and wanted to save.
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseMapFilters'
        - type: object
          properties:
            markers:
              type: array
              items:
                # SWAGGER-UI-OUT-START
                $ref: '#/components/schemas/MarkerItemIdentifier'
                # SWAGGER-UI-OUT-END
                # SWAGGER-UI-IN-START
                #description: list of unique identifiers of the items selected to filter under markers.
                #allOf:
                #  - $ref: '#/components/schemas/MarkerItemIdentifier'
                # SWAGGER-UI-IN-END
      example:
        groups: [15,20]
        applications: [1,2]
        tags: [3,4]
        markers: [CDE,PII]
    MarkerResult:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/MarkerItemIdentifier'
        ids:
          $ref: '#/components/schemas/FilterIds'

    MapFilterResults:
      description: Describes the map filter results on applied filters
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseMapFilters'
        - type: object
          properties:
            markers:
              description: |
                Keys are languages in ISO 639-1 format (two-letter codes), OR empty for the default language.  
                Values are mapping between a MLC attribute and its value in that language.
              type: array
              items:
                $ref: '#/components/schemas/MarkerResult'

    MarkerItemIdentifier:
      type: string
      enum: [CDE,PII,"*"]
      description: |
        Describes the unique identifier of the markers. Possible values are,
        * `CDE` Describes that item is marked as critical data element. Linked by one or multiple Business items of type Critical Data Element.
        * `PII` Describes that item is marked containing Personal Identifiable Information.
        * `*` Means any of the above values and can be used in search. 
        
    LineageDataRequest:
      description: the request structure for a lineage graph API call
      type: object
      properties:
        seedItemIds:
          description: query seed item identifiers
          type: array
          items:
            type: integer
            format: int64
        queryName:
          description: name of the maskable path query (or some abstraction like fwd, bwd, e2e, ...)
          type: string
        mask:
          description: Identifies a mask to be used for this query.
          type: string
          nullable: true
        limit:
          description: Limits the result to the specified number of entries (zero means unlimited, -1 means value of asg.rochade.query.limit.default parameter from the application configuration)
          type: integer
          format: int32
          default: -1
        depth:
          description: Limit the structural depth to a specified value (-1 means value of asg.rochade.query.depth.default parameter from the application configuration).
          type: integer
          format: int32
          default: -1
        hopsMode:
          # SWAGGER-UI-OUT-START
          $ref: '#/components/schemas/HopsMode'
          # SWAGGER-UI-OUT-END
          # SWAGGER-UI-IN-START
          #description: If provided, it activates a special query mode, considering only a selected set of item types as neighbors and merges additional subgraphs into the result.
          #allOf:
          #  - $ref: '#/components/schemas/HopsMode'
          #nullable: true
          # SWAGGER-UI-IN-END
        what:
          description: "Attributes to return"
          type: array
          items:
            type: string
          default: [ "id", "scopeId", "type", "name" ]
          nullable: true
        references:
          description: list of reference types that should be included (applications, business items, markers, ...)
          type: array
          items:
            $ref: '#/components/schemas/LineageGraphReferenceType'
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        # maybe additional parameters (query parameters, ...)
        filters:
          $ref: '#/components/schemas/SelectedMapFilters'
    LineageResultGraph:
      description: |
        A graph model, containing 
        the response structure for a lineage graph API call
      type: object
      properties:
        model:
          $ref: '#/components/schemas/LineageGraphModel'
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        filterResults:
          $ref: '#/components/schemas/MapFilterResults'

    ResultGraphLink:
      description: a link from the Rochade database
      type: object
      properties:
        sourceId:
          description: identifier of source item
          type: integer
          format: int64
        targetId:
          description: identifier of target item
          type: integer
          format: int64
        distance:
          description: distance to seed item
          type: integer
          format: int32
        reverse:
          description: true if link direction is different to physical link direction
          type: boolean
          nullable: true
        attr:
          description: link attribute name
          type: string
          nullable: true
        info:
          description: link information (link qualifier)
          type: string
          nullable: true

    LineageGraphReferenceType:
      description: the reference type
      type: string
      enum: [APPLICATIONS, BUSINESS_ITEMS]

    LineageGraphReference:
      description: additional reference, required for diagram calculation
      type: object
      properties:
        type:
          $ref: '#/components/schemas/LineageGraphReferenceType'
        items:
          description: the reference items (with logical namespace hierarchy)
          type: array
          items:
            $ref: '#/components/schemas/ResultGraphItem'
        links:
          description: the reference links
          type: array
          items:
            $ref: '#/components/schemas/ResultGraphLink'

    LineageLimitId:
      type: string
      enum: [QUERY_LIMIT, IMPORT_ERROR]
      description: |
        Limit identifier, specifying the reason for the incomplete response.
        * `QUERY_LIMIT` the result is incomplete due to applied query limits (maxHits, maxTime or depth).
        * `IMPORT_ERROR` the result might be  incomplete due to import error from external systems.

    LineageLimit:
      type: object
      properties:
        limitId: 
          $ref: '#/components/schemas/LineageLimitId'
        value:
          description: the limit value
          type: integer
          format: int32
          nullable: true
        message:
          description: plain text message that could be displayed to the user
          type: string
          nullable: true

    LineageGraphStatus:
      description: the lineage graph status
      type: object
      properties:
        #stats:
        #  description: statistics like number of items, links, etc. for informational purposes
        #  type: object
        #  additionalProperties:
        #    description: key value pairs
        #    type: integer
        #    format: int32
        #  nullable: true
        limits:
          description: information about applied limits
          type: array
          items:
            $ref: '#/components/schemas/LineageLimit'
          nullable: true
          
    LineageGraphModel:
      description: raw model for diagram calculation, containing items, links and references
      type: object
      properties:
        items:
          description: the physical items (with logical namespace hierarchy)
          type: array
          items:
            $ref: '#/components/schemas/ResultGraphItem'
        links:
          description: the physical links
          type: array
          items:
            $ref: '#/components/schemas/ResultGraphLink'
        references:
          type: array
          items:
            $ref: '#/components/schemas/LineageGraphReference'
        status:
          $ref: '#/components/schemas/LineageGraphStatus'

    ResultGraphItem:
      description: an object from the Rochade database
      type: object
      properties:
        id:
          description: item identifier
          type: integer
          format: int64
        scopeId:
          description: items scope identifier
          type: integer
          format: int64
          nullable: true
        type:
          description: item type
          type: string
          nullable: true
        name:
          description: item name
          type: string
          nullable: true
        children:
          description: logical child items (not necessarily in the namespace hierarchy)
          type: array
          items:
            # recursive schemas are badly processed by SwaggerUI
            # see https://stackoverflow.com/questions/36866035/how-to-refer-to-enclosing-type-definition-recursively-in-openapi-swagger
            # one proposed workaround is tricking with , but it does not allow to accomplish the real purpose of recursive schema!
            # Not only Swagger-codegen does not support cycling schemas but also Swagger-UI fails regarding such definition.
            # It is a shame because openapi-generator manages them very well, so we are restrained just by Swagger-UI.
            # Solution is to define the proper recursive schema for processing by openapi-generator, and have a web filter
            # that tweak this file on the fly when Swagger-UI download this resource from server.
            # This is the purpose of SWAGGER-UI-XXX-YYYY tags. Content in between is added or removed on the fly by
            # SWAGGER-UI-OUT-START
            $ref: '#/components/schemas/ResultGraphItem'
            # SWAGGER-UI-OUT-END
            # SWAGGER-UI-IN-START
            #description: recursive point (=> ResultGraphItem)
            #type: object
            # SWAGGER-UI-IN-END
          nullable: true
        properties:
          description: additional properties
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResultItemAttributes'

          nullable: true

    HopsMode:
      type: object
      properties:
        hopsDepth:
          description: |
            Limit the structural depth to a specified value.
            In opposite to `depth`, this parameter considers only items of type `hopsTypes` as neighbors.
            
            _Note: The `depth` parameter is still effective and should therefore be sufficiently high._
          type: integer
          format: int32
          default: 1
        hopsSeedIds:
          description: |
            specifies item identifiers, that are considered as additional seed items within the lineage result (expanded left or right besides the queries seed item(s))
            * itemIds < 0 will be considered as contained in backward lineage
            * itemIds > 0 will be considered as contained in forward lineage
            
            The subgraphs for the specified items will be added to the lineage graph result retrieved via the main query.
          type: array
          items:
            type: integer
            format: int64
        hopsTypes:
          description: |
            specifies the item types, that are considered as hops.
          type: array
          items:
            type: string
        queryNameFwd:
          description: name of the maskable path query for forward direction (uses the same `mask` as main query)
          type: string
        queryNameBwd:
          description: name of the maskable path query for backward direction (uses the same `mask` as main query)
          type: string

