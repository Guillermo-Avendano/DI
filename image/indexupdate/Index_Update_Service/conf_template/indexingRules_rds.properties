##################################################
# Index Update Service - Solr indexing configuration
#
# Copyright (c) 1983-2023 Rocket Software, Inc. or its affiliates. All Rights Reserved.
#
# Version 10.01.001
#
# This file defines the item types and attributes to index.
# To index an item type: add a key with that type (or one of its super types).
# An item type declaration is valid for all sub types unless a more specific entry is found.
# To index an attribute: add that attribute among the values for type key (or any super type).
# An item attribute declaration is valid for all sub types as long as it is not explicitly removed.
# So it is useless the declare again the attributes already declared on a super type when adding an entry with a more
# specific sub-type (in order to add more specific attributes): the inherited attributes will be indexed too.
# Example: If 'B' is a sub-type of 'A', then 'Attr1' will be indexed too for type 'B'
# --------
# A = Attr1
# B = Attr2
#
# To prevent the indexing of an attribute 'Attr1' on type 'B' that would be normally indexed because the super type 'A'
# declares that attribute, simply declare again that attribute on type 'B' but enclose it with 'not()' function.
# Example:
# --------
# A = Attr1
# B = not(Attr1) Attr2
#
# To fully prevent the indexing of type B that would be normally indexed because the super type 'A' is declared,
# simply declare the type B but enclose it with 'not()' function.
# Note that it will prevent indexing of any sub-types of type B (until a more specific indexing rule be defined on a sub-type of B, then that rule starts to apply and inheritance continues from that new rule)
# Example:
# --------
# A = Attr1
# not(B) =
#
# Usage of aliases (see below) is strongly discouraged! It is only kept for backward compatibility purposes.
# To index an attribute under a specific name (by default each attribute is indexed in a Solr field which the name is derived from the attribute name),
# declare the function 'alias(attribute,new_name)' among the attributes to index.
# Example: the attribute 'Attr1' will be indexed in a Solr field which name will be derived from 'DEMO' (Note that, in this example due to the double declaration, the attribute 'Attr1' will also be indexed as 'Attr1')
# --------
# A = alias(Attr1,DEMO) Attr1
#
# To index a constant value, declare the function 'constant(value,name)' among the attributes to index.
# Example: the constant value 'search_mg' will be indexed as Solr field 'app_id' on type A and its sub-types
# --------
# A = Attr1 constant(search_mg,app_id) Attr2
#
# To index a dynamic value, declare the function 'dynamic(class,name)' among the attributes to index.
# Example: a value will be dynamically computed using the implementation class 'com.rochade.index.dynamic.ItemGlossaryDynamic' and indexed as Solr field 'level3' on type A and its sub-types
# --------
# A = Attr1 dynamic(com.rochade.index.dynamic.ItemGlossaryDynamic,level3) Attr2
#
#
# Escaping
# ========
# To escape special characters ',', '(', ')' and '\' precede them with a backslash character.
# Take care that due to the encoding proper to Properties file, the backslash character is itself an escaper.
# So, to declare a simple escaping backslash character, we must write it twice in this Properties file.
# Examples: 
# ---------
# writing here \\, escapes the ',' character
# while writing \\\\, escapes the '\' character located just before a (non-escaped) ',' character.
#
# To facilitate the declaration of rules, contrary to regular Properties file format, there is no need to escape any character
# prior to the key-value separator (so any text before the first '=' character), except naturally the '=' character itself.
# In other words, in the key part, the special characters ',', '(', ')' and '\' does NOT need to be escaped into the key part.
# The key part being any text before the first '=' character that is not escaped.
#
# Inline Comments
# ===============
# Contrary to regular Properties files, inline comments may be added by enclosing the text of the comment between '/*' and '*/' character sequences,
# respectively at beginning and the end of the comment.
# In the case where a clause should contain one of those two sequences as a valid text (not as a comment), the correct way to declare
# such a text is to escape the '*' character among the sequence.
# Examples: 
# ---------
# writing A /* alpha */ B puts alpha in comment, and so it is the same as writing A B
# however writing A/\\*B means that the clause has the value A/*B 
#
#
# type filtering with SDCAC condition
# ===================================
# For a given type, it is possible to filter which items of that type are really to be indexed by adding a SDCAC condition. Only the item (of the given type) that does satisfy the condition will be indexed. All the other ones will be ignored just as if they did not exist.
# Take care that the filtering condition is applied ONLY to the items of that precise type. It will NOT be applied to any sub-type, EVEN if the subtype is inherited (i.e. no one specific rule is defined for that sub-type and so the indexing rule of the parent type are in use).
# To define such a filter condition, use the filter() function to wrap the item type when defining the key.
# Example:
# --------
# To index Data Concepts (MDM_RMD_DATA_CONCEPT) into Solr BUT only those which scope items are of type Data Context (ie the first-class Data Concepts), the key for indexing rules of type MDM_RMD_DATA_CONCEPT must be defined this way.
# filter(MDM_RMD_DATA_CONCEPT, NA MDM_HAS_CONCEPT BELONGS_TO SUPER MDM_DATA_CONTEXT) = ...
# 
##################################################

DWR_DAT_PACKAGE = DEFINITION constant(111, level1) constant(112, level2)
DWR_DAT_FILE = DEFINITION constant(111, level1) constant(113, level2)
DWR_DAT_DATA_TYPE = DEFINITION constant(111, level1) constant(114, level2)
DWR_DAT_DOMAIN = DEFINITION constant(111, level1) constant(115, level2)
DWR_DAT_FIELD = DEFINITION constant(111, level1) constant(116, level2)
DWR_DAT_RECORD_TYPE = DEFINITION constant(111, level1) constant(117, level2)
# levels 118 119 already defined in Stitching area
DWR_DAT_FILE_SYSTEM = DEFINITION constant(111, level1) constant(218, level2)
DWR_DAT_DIRECTORY = DEFINITION constant(111, level1) constant(219, level2)
